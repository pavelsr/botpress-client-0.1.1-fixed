{
  "version": 3,
  "sources": ["../src/index.ts", "../src/config.ts", "../src/gen/errors.ts", "../src/gen/client.ts", "../src/gen/api.ts", "../src/gen/base.ts", "../src/gen/common.ts"],
  "sourcesContent": ["import axios from 'axios'\nexport * as axios from 'axios'\nimport { getClientConfig, ClientProps, ClientConfig } from './config'\nexport type { Message, Conversation, User, State, Event, ModelFile as File, Bot, Integration } from './gen'\nexport * from './gen/errors'\nimport { ApiClient as AutoGeneratedClient } from './gen/client'\n\nexport class Client extends AutoGeneratedClient {\n  public readonly config: ClientConfig\n\n  public constructor(clientProps: ClientProps = {}) {\n    const clientConfig = getClientConfig(clientProps)\n    const { host, headers, withCredentials, timeout } = clientConfig\n\n    const axiosClient = axios.create({\n      maxBodyLength: 100 * 1024 * 1024, // 100MB\n      maxContentLength: 1024 * 1024 * 1024, // 100MB\n      timeout: timeout ?? 60_000,\n      withCredentials,\n      headers,\n    })\n\n    super(undefined, host, axiosClient)\n\n    this.config = clientConfig\n  }\n}\n", "import { isBrowser, isNode } from 'browser-or-node'\n\nconst defaultApiUrl = 'https://botpress.linsec.dev/api'\n\nconst apiUrlEnvName = 'BP_API_URL'\nconst botIdEnvName = 'BP_BOT_ID'\nconst integrationIdEnvName = 'BP_INTEGRATION_ID'\nconst workspaceIdEnvName = 'BP_WORKSPACE_ID'\nconst tokenEnvName = 'BP_TOKEN'\n\nexport type ClientProps = {\n  host?: string\n  integrationId?: string\n  workspaceId?: string\n  botId?: string\n  token?: string\n  timeout?: number\n}\n\nexport type ClientConfig = {\n  host: string\n  headers: Record<string, string>\n  withCredentials: boolean\n  timeout?: number\n}\n\nexport function getClientConfig(clientProps: ClientProps): ClientConfig {\n  const props = getProps(clientProps)\n\n  const headers: Record<string, string> = {}\n\n  if (props.workspaceId) {\n    headers['x-workspace-id'] = props.workspaceId\n  }\n\n  if (props.botId) {\n    headers['x-bot-id'] = props.botId\n  }\n\n  if (props.integrationId) {\n    headers['x-integration-id'] = props.integrationId\n  }\n\n  if (props.token) {\n    headers['Authorization'] = `Bearer ${props.token}`\n  }\n\n  return {\n    host: props.host ?? defaultApiUrl,\n    withCredentials: isBrowser,\n    headers,\n  }\n}\n\nfunction getProps(props: ClientProps) {\n  if (isBrowser) {\n    return getBrowserConfig(props)\n  }\n\n  if (isNode) {\n    return getNodeConfig(props)\n  }\n\n  return props\n}\n\nfunction getNodeConfig(props: ClientProps): ClientProps {\n  const config: ClientProps = {\n    ...props,\n    host: props.host ?? process.env[apiUrlEnvName] ?? defaultApiUrl,\n    botId: props.botId ?? process.env[botIdEnvName],\n    integrationId: props.integrationId ?? process.env[integrationIdEnvName],\n    workspaceId: props.workspaceId ?? process.env[workspaceIdEnvName],\n  }\n\n  const token = config.token ?? process.env[tokenEnvName]\n\n  if (token) {\n    config.token = token\n  }\n\n  return config\n}\n\nfunction getBrowserConfig(props: ClientProps): ClientProps {\n  return props\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n\nconst codes = {\n  HTTP_STATUS_BAD_REQUEST: 400,\n  HTTP_STATUS_UNAUTHORIZED: 401,\n  HTTP_STATUS_PAYMENT_REQUIRED: 402,\n  HTTP_STATUS_FORBIDDEN: 403,\n  HTTP_STATUS_NOT_FOUND: 404,\n  HTTP_STATUS_METHOD_NOT_ALLOWED: 405,\n  HTTP_STATUS_REQUEST_TIMEOUT: 408,\n  HTTP_STATUS_CONFLICT: 409,\n  HTTP_STATUS_PAYLOAD_TOO_LARGE: 413,\n  HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: 415,\n  HTTP_STATUS_TOO_MANY_REQUESTS: 429,\n  HTTP_STATUS_INTERNAL_SERVER_ERROR: 500,\n  HTTP_STATUS_NOT_IMPLEMENTED: 501,\n  HTTP_STATUS_BAD_GATEWAY: 502,\n  HTTP_STATUS_SERVICE_UNAVAILABLE: 503,\n  HTTP_STATUS_GATEWAY_TIMEOUT: 504,\n} as const\n\ntype ErrorCode = typeof codes[keyof typeof codes]\n\nabstract class BaseApiError<Code extends ErrorCode, Type extends string, Description extends string> extends Error {\n  public readonly isApiError = true\n\n  constructor(\n    public readonly code: Code,\n    public readonly description: Description,\n    public readonly type: Type,\n    public override readonly message: string,\n    public readonly error?: Error\n  ) {\n    super(message)\n  }\n\n  toJSON() {\n    return {\n      code: this.code,\n      type: this.type,\n      message: this.message,\n    }\n  }\n}\n\nconst isObject = (obj: unknown): obj is object => typeof obj === 'object' && !Array.isArray(obj) && obj !== null\n\nexport const isApiError = (thrown: unknown): thrown is ApiError => {\n  return thrown instanceof BaseApiError || isObject(thrown) && (thrown as ApiError).isApiError === true\n}\n\ntype UnknownType = 'Unknown'\n\n/**\n *  An unknown error occurred\n */\nexport class UnknownError extends BaseApiError<500, UnknownType, 'An unknown error occurred'> {\n  constructor(message: string, error?: Error) {\n    super(500, 'An unknown error occurred', 'Unknown', message, error)\n  }\n}\n\ntype InternalType = 'Internal'\n\n/**\n *  An internal error occurred\n */\nexport class InternalError extends BaseApiError<500, InternalType, 'An internal error occurred'> {\n  constructor(message: string, error?: Error) {\n    super(500, 'An internal error occurred', 'Internal', message, error)\n  }\n}\n\ntype UnauthorizedType = 'Unauthorized'\n\n/**\n *  The request requires to be authenticated.\n */\nexport class UnauthorizedError extends BaseApiError<401, UnauthorizedType, 'The request requires to be authenticated.'> {\n  constructor(message: string, error?: Error) {\n    super(401, 'The request requires to be authenticated.', 'Unauthorized', message, error)\n  }\n}\n\ntype ForbiddenType = 'Forbidden'\n\n/**\n *  The requested action can\\'t be peform by this resource.\n */\nexport class ForbiddenError extends BaseApiError<403, ForbiddenType, 'The requested action can\\'t be peform by this resource.'> {\n  constructor(message: string, error?: Error) {\n    super(403, 'The requested action can\\'t be peform by this resource.', 'Forbidden', message, error)\n  }\n}\n\ntype PayloadTooLargeType = 'PayloadTooLarge'\n\n/**\n *  The request payload is too large.\n */\nexport class PayloadTooLargeError extends BaseApiError<413, PayloadTooLargeType, 'The request payload is too large.'> {\n  constructor(message: string, error?: Error) {\n    super(413, 'The request payload is too large.', 'PayloadTooLarge', message, error)\n  }\n}\n\ntype InvalidPayloadType = 'InvalidPayload'\n\n/**\n *  The request payload is invalid.\n */\nexport class InvalidPayloadError extends BaseApiError<400, InvalidPayloadType, 'The request payload is invalid.'> {\n  constructor(message: string, error?: Error) {\n    super(400, 'The request payload is invalid.', 'InvalidPayload', message, error)\n  }\n}\n\ntype UnsupportedMediaTypeType = 'UnsupportedMediaType'\n\n/**\n *  The request is invalid because the content-type is not supported.\n */\nexport class UnsupportedMediaTypeError extends BaseApiError<415, UnsupportedMediaTypeType, 'The request is invalid because the content-type is not supported.'> {\n  constructor(message: string, error?: Error) {\n    super(415, 'The request is invalid because the content-type is not supported.', 'UnsupportedMediaType', message, error)\n  }\n}\n\ntype MethodNotFoundType = 'MethodNotFound'\n\n/**\n *  The requested method does not exist.\n */\nexport class MethodNotFoundError extends BaseApiError<405, MethodNotFoundType, 'The requested method does not exist.'> {\n  constructor(message: string, error?: Error) {\n    super(405, 'The requested method does not exist.', 'MethodNotFound', message, error)\n  }\n}\n\ntype ResourceNotFoundType = 'ResourceNotFound'\n\n/**\n *  The requested resource does not exist.\n */\nexport class ResourceNotFoundError extends BaseApiError<404, ResourceNotFoundType, 'The requested resource does not exist.'> {\n  constructor(message: string, error?: Error) {\n    super(404, 'The requested resource does not exist.', 'ResourceNotFound', message, error)\n  }\n}\n\ntype InvalidJsonSchemaType = 'InvalidJsonSchema'\n\n/**\n *  The provided JSON schema is invalid.\n */\nexport class InvalidJsonSchemaError extends BaseApiError<400, InvalidJsonSchemaType, 'The provided JSON schema is invalid.'> {\n  constructor(message: string, error?: Error) {\n    super(400, 'The provided JSON schema is invalid.', 'InvalidJsonSchema', message, error)\n  }\n}\n\ntype InvalidDataFormatType = 'InvalidDataFormat'\n\n/**\n *  The provided data doesn\\'t respect the provided JSON schema.\n */\nexport class InvalidDataFormatError extends BaseApiError<400, InvalidDataFormatType, 'The provided data doesn\\'t respect the provided JSON schema.'> {\n  constructor(message: string, error?: Error) {\n    super(400, 'The provided data doesn\\'t respect the provided JSON schema.', 'InvalidDataFormat', message, error)\n  }\n}\n\ntype InvalidIdentifierType = 'InvalidIdentifier'\n\n/**\n *  The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.\n */\nexport class InvalidIdentifierError extends BaseApiError<400, InvalidIdentifierType, 'The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.'> {\n  constructor(message: string, error?: Error) {\n    super(400, 'The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.', 'InvalidIdentifier', message, error)\n  }\n}\n\ntype RelationConflictType = 'RelationConflict'\n\n/**\n *  The resource is not related with another resource. This is usually caused when providing two resources that aren\\'t linked together.\n */\nexport class RelationConflictError extends BaseApiError<409, RelationConflictType, 'The resource is not related with another resource. This is usually caused when providing two resources that aren\\'t linked together.'> {\n  constructor(message: string, error?: Error) {\n    super(409, 'The resource is not related with another resource. This is usually caused when providing two resources that aren\\'t linked together.', 'RelationConflict', message, error)\n  }\n}\n\ntype ReferenceNotFoundType = 'ReferenceNotFound'\n\n/**\n *  The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.\n */\nexport class ReferenceNotFoundError extends BaseApiError<400, ReferenceNotFoundType, 'The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.'> {\n  constructor(message: string, error?: Error) {\n    super(400, 'The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.', 'ReferenceNotFound', message, error)\n  }\n}\n\ntype InvalidQueryType = 'InvalidQuery'\n\n/**\n *  The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.\n */\nexport class InvalidQueryError extends BaseApiError<400, InvalidQueryType, 'The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.'> {\n  constructor(message: string, error?: Error) {\n    super(400, 'The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.', 'InvalidQuery', message, error)\n  }\n}\n\ntype RuntimeType = 'Runtime'\n\n/**\n *  An error happened during the execution of a runtime (bot or integration).\n */\nexport class RuntimeError extends BaseApiError<400, RuntimeType, 'An error happened during the execution of a runtime (bot or integration).'> {\n  constructor(message: string, error?: Error) {\n    super(400, 'An error happened during the execution of a runtime (bot or integration).', 'Runtime', message, error)\n  }\n}\n\nexport type ErrorType =\n  | 'Unknown'\n  | 'Internal'\n  | 'Unauthorized'\n  | 'Forbidden'\n  | 'PayloadTooLarge'\n  | 'InvalidPayload'\n  | 'UnsupportedMediaType'\n  | 'MethodNotFound'\n  | 'ResourceNotFound'\n  | 'InvalidJsonSchema'\n  | 'InvalidDataFormat'\n  | 'InvalidIdentifier'\n  | 'RelationConflict'\n  | 'ReferenceNotFound'\n  | 'InvalidQuery'\n  | 'Runtime'\n\nexport type ApiError =\n  | UnknownError\n  | InternalError\n  | UnauthorizedError\n  | ForbiddenError\n  | PayloadTooLargeError\n  | InvalidPayloadError\n  | UnsupportedMediaTypeError\n  | MethodNotFoundError\n  | ResourceNotFoundError\n  | InvalidJsonSchemaError\n  | InvalidDataFormatError\n  | InvalidIdentifierError\n  | RelationConflictError\n  | ReferenceNotFoundError\n  | InvalidQueryError\n  | RuntimeError\n\nconst errorTypes: { [type: string]: new (message: string, error?: Error) => ApiError } = {\n  Unknown: UnknownError,\n  Internal: InternalError,\n  Unauthorized: UnauthorizedError,\n  Forbidden: ForbiddenError,\n  PayloadTooLarge: PayloadTooLargeError,\n  InvalidPayload: InvalidPayloadError,\n  UnsupportedMediaType: UnsupportedMediaTypeError,\n  MethodNotFound: MethodNotFoundError,\n  ResourceNotFound: ResourceNotFoundError,\n  InvalidJsonSchema: InvalidJsonSchemaError,\n  InvalidDataFormat: InvalidDataFormatError,\n  InvalidIdentifier: InvalidIdentifierError,\n  RelationConflict: RelationConflictError,\n  ReferenceNotFound: ReferenceNotFoundError,\n  InvalidQuery: InvalidQueryError,\n  Runtime: RuntimeError,\n}\n\nexport const errorFrom = (err: unknown): ApiError => {\n  if (isApiError(err)) {\n    return err\n  }\n\n  if (err instanceof Error) {\n    return new UnknownError(err.message, err)\n  }\n\n  if (err === null) {\n    return new UnknownError('An unknown error occurred')\n  }\n\n  if (typeof err === 'string') {\n    return new UnknownError(err)\n  }\n\n  if (typeof err !== 'object') {\n    return new UnknownError('An unknown error occurred')\n  }\n\n  return getErrorFromObject(err)\n}\n\nfunction getErrorFromObject(err: object) {\n  if ('code' in err && 'type' in err && 'message' in err) {\n    if (typeof err.message !== 'string') {\n      return new UnknownError('An unknown error occurred')\n    }\n\n    if (typeof err.type !== 'string') {\n      return new UnknownError(err.message)\n    }\n\n    const ErrorClass = errorTypes[err.type]\n\n    if (!ErrorClass) {\n      return new UnknownError(err.message)\n    }\n\n    return new ErrorClass(err.message)\n  }\n\n  return new UnknownError('An unknown error occurred')\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n\nimport axios, { AxiosInstance } from 'axios'\nimport type { Merge, Except } from 'type-fest'\nimport {\n  DefaultApi,\n  Configuration,\n\tDefaultApiCreateConversationRequest,\n\tDefaultApiGetConversationRequest,\n\tDefaultApiListConversationsRequest,\n\tDefaultApiGetOrCreateConversationRequest,\n\tDefaultApiUpdateConversationRequest,\n\tDefaultApiDeleteConversationRequest,\n\tDefaultApiCreateEventRequest,\n\tDefaultApiGetEventRequest,\n\tDefaultApiListEventsRequest,\n\tDefaultApiCreateMessageRequest,\n\tDefaultApiGetOrCreateMessageRequest,\n\tDefaultApiGetMessageRequest,\n\tDefaultApiUpdateMessageRequest,\n\tDefaultApiListMessagesRequest,\n\tDefaultApiDeleteMessageRequest,\n\tDefaultApiCreateUserRequest,\n\tDefaultApiGetUserRequest,\n\tDefaultApiListUsersRequest,\n\tDefaultApiGetOrCreateUserRequest,\n\tDefaultApiUpdateUserRequest,\n\tDefaultApiDeleteUserRequest,\n\tDefaultApiGetStateRequest,\n\tDefaultApiSetStateRequest,\n\tDefaultApiPatchStateRequest,\n\tDefaultApiCallActionRequest,\n\tDefaultApiConfigureIntegrationRequest,\n\tDefaultApiListPublicIntegrationsRequest,\n\tDefaultApiGetPublicIntegrationByIdRequest,\n\tDefaultApiGetPublicIntegrationRequest,\n\tDefaultApiCreateBotRequest,\n\tDefaultApiUpdateBotRequest,\n\tDefaultApiTransferBotRequest,\n\tDefaultApiListBotsRequest,\n\tDefaultApiGetBotRequest,\n\tDefaultApiDeleteBotRequest,\n\tDefaultApiGetBotLogsRequest,\n\tDefaultApiGetBotWebchatRequest,\n\tDefaultApiGetBotAnalyticsRequest,\n\tDefaultApiGetWorkspaceRequest,\n\tDefaultApiUpdateWorkspaceRequest,\n\tDefaultApiListWorkspacesRequest,\n\tDefaultApiCreateIntegrationRequest,\n\tDefaultApiUpdateIntegrationRequest,\n\tDefaultApiListIntegrationsRequest,\n\tDefaultApiGetIntegrationRequest,\n\tDefaultApiGetIntegrationLogsRequest,\n\tDefaultApiGetIntegrationByNameRequest,\n\tDefaultApiDeleteIntegrationRequest,\n\tDefaultApiListWorkspaceMembersRequest,\n\tDefaultApiDeleteWorkspaceMemberRequest,\n\tDefaultApiCreateWorkspaceMemberRequest,\n\tDefaultApiUpdateWorkspaceMemberRequest,\n\tDefaultApiIntrospectRequest,\n\tDefaultApiCreateFileRequest,\n\tDefaultApiGetFileRequest,\n\tDefaultApiDownloadFileRequest,\n\tDefaultApiDeleteFileRequest,\n\tDefaultApiListFilesRequest,\n} from '.'\nimport { errorFrom } from './errors'\n\nexport class ApiClient {\n  private _innerClient: DefaultApi\n  public constructor(configuration?: Configuration, basePath?: string, axiosInstance?: AxiosInstance) {\n    this._innerClient = new DefaultApi(configuration, basePath, axiosInstance)\n  }\n\tpublic createConversation = (createConversationBody: CreateConversationProps) => this._innerClient.createConversation({ createConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getConversation = (props: GetConversationProps) => this._innerClient.getConversation(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listConversations = (props: ListConversationsProps) => this._innerClient.listConversations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateConversation = (getOrCreateConversationBody: GetOrCreateConversationProps) => this._innerClient.getOrCreateConversation({ getOrCreateConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateConversation = ({ id, ...updateConversationBody }: UpdateConversationProps) => this._innerClient.updateConversation({ id, updateConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteConversation = (props: DeleteConversationProps) => this._innerClient.deleteConversation(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createEvent = (createEventBody: CreateEventProps) => this._innerClient.createEvent({ createEventBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getEvent = (props: GetEventProps) => this._innerClient.getEvent(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listEvents = (props: ListEventsProps) => this._innerClient.listEvents(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createMessage = (createMessageBody: CreateMessageProps) => this._innerClient.createMessage({ createMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateMessage = (getOrCreateMessageBody: GetOrCreateMessageProps) => this._innerClient.getOrCreateMessage({ getOrCreateMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getMessage = (props: GetMessageProps) => this._innerClient.getMessage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateMessage = ({ id, ...updateMessageBody }: UpdateMessageProps) => this._innerClient.updateMessage({ id, updateMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listMessages = (props: ListMessagesProps) => this._innerClient.listMessages(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteMessage = (props: DeleteMessageProps) => this._innerClient.deleteMessage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createUser = (createUserBody: CreateUserProps) => this._innerClient.createUser({ createUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getUser = (props: GetUserProps) => this._innerClient.getUser(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listUsers = (props: ListUsersProps) => this._innerClient.listUsers(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateUser = (getOrCreateUserBody: GetOrCreateUserProps) => this._innerClient.getOrCreateUser({ getOrCreateUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateUser = ({ id, ...updateUserBody }: UpdateUserProps) => this._innerClient.updateUser({ id, updateUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteUser = (props: DeleteUserProps) => this._innerClient.deleteUser(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getState = (props: GetStateProps) => this._innerClient.getState(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic setState = ({ type, id, name, ...setStateBody }: SetStateProps) => this._innerClient.setState({ type, id, name, setStateBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic patchState = ({ type, id, name, ...patchStateBody }: PatchStateProps) => this._innerClient.patchState({ type, id, name, patchStateBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic callAction = (callActionBody: CallActionProps) => this._innerClient.callAction({ callActionBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic configureIntegration = (configureIntegrationBody: ConfigureIntegrationProps) => this._innerClient.configureIntegration({ configureIntegrationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listPublicIntegrations = (props: ListPublicIntegrationsProps) => this._innerClient.listPublicIntegrations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getPublicIntegrationById = (props: GetPublicIntegrationByIdProps) => this._innerClient.getPublicIntegrationById(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getPublicIntegration = (props: GetPublicIntegrationProps) => this._innerClient.getPublicIntegration(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createBot = (createBotBody: CreateBotProps) => this._innerClient.createBot({ createBotBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateBot = ({ id, ...updateBotBody }: UpdateBotProps) => this._innerClient.updateBot({ id, updateBotBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic transferBot = ({ id, ...transferBotBody }: TransferBotProps) => this._innerClient.transferBot({ id, transferBotBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listBots = (props: ListBotsProps) => this._innerClient.listBots(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBot = (props: GetBotProps) => this._innerClient.getBot(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteBot = (props: DeleteBotProps) => this._innerClient.deleteBot(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBotLogs = (props: GetBotLogsProps) => this._innerClient.getBotLogs(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBotWebchat = (props: GetBotWebchatProps) => this._innerClient.getBotWebchat(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getBotAnalytics = (props: GetBotAnalyticsProps) => this._innerClient.getBotAnalytics(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getWorkspace = (props: GetWorkspaceProps) => this._innerClient.getWorkspace(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateWorkspace = ({ id, ...updateWorkspaceBody }: UpdateWorkspaceProps) => this._innerClient.updateWorkspace({ id, updateWorkspaceBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaces = (props: ListWorkspacesProps) => this._innerClient.listWorkspaces(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createIntegration = (createIntegrationBody: CreateIntegrationProps) => this._innerClient.createIntegration({ createIntegrationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateIntegration = ({ id, ...updateIntegrationBody }: UpdateIntegrationProps) => this._innerClient.updateIntegration({ id, updateIntegrationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listIntegrations = (props: ListIntegrationsProps) => this._innerClient.listIntegrations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getIntegration = (props: GetIntegrationProps) => this._innerClient.getIntegration(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getIntegrationLogs = (props: GetIntegrationLogsProps) => this._innerClient.getIntegrationLogs(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getIntegrationByName = (props: GetIntegrationByNameProps) => this._innerClient.getIntegrationByName(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteIntegration = (props: DeleteIntegrationProps) => this._innerClient.deleteIntegration(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listWorkspaceMembers = (props: ListWorkspaceMembersProps) => this._innerClient.listWorkspaceMembers(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteWorkspaceMember = (props: DeleteWorkspaceMemberProps) => this._innerClient.deleteWorkspaceMember(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createWorkspaceMember = (createWorkspaceMemberBody: CreateWorkspaceMemberProps) => this._innerClient.createWorkspaceMember({ createWorkspaceMemberBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateWorkspaceMember = ({ id, ...updateWorkspaceMemberBody }: UpdateWorkspaceMemberProps) => this._innerClient.updateWorkspaceMember({ id, updateWorkspaceMemberBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic introspect = (introspectBody: IntrospectProps) => this._innerClient.introspect({ introspectBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createFile = (createFileBody: CreateFileProps) => this._innerClient.createFile({ createFileBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getFile = (props: GetFileProps) => this._innerClient.getFile(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic downloadFile = (props: DownloadFileProps) => this._innerClient.downloadFile(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteFile = (props: DeleteFileProps) => this._innerClient.deleteFile(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listFiles = (props: ListFilesProps) => this._innerClient.listFiles(props).then((res) => res.data).catch((e) => { throw getError(e) })\n}\n\nexport type CreateConversationProps = Merge<\n  Except<DefaultApiCreateConversationRequest, 'createConversationBody'>,\n  NonNullable<DefaultApiCreateConversationRequest['createConversationBody']>\n>\n\nexport type GetConversationProps = Merge<DefaultApiGetConversationRequest, {}>\n\nexport type ListConversationsProps = Merge<DefaultApiListConversationsRequest, {}>\n\nexport type GetOrCreateConversationProps = Merge<\n  Except<DefaultApiGetOrCreateConversationRequest, 'getOrCreateConversationBody'>,\n  NonNullable<DefaultApiGetOrCreateConversationRequest['getOrCreateConversationBody']>\n>\n\nexport type UpdateConversationProps = Merge<\n  Except<DefaultApiUpdateConversationRequest, 'updateConversationBody'>,\n  NonNullable<DefaultApiUpdateConversationRequest['updateConversationBody']>\n>\n\nexport type DeleteConversationProps = Merge<DefaultApiDeleteConversationRequest, {}>\n\nexport type CreateEventProps = Merge<\n  Except<DefaultApiCreateEventRequest, 'createEventBody'>,\n  NonNullable<DefaultApiCreateEventRequest['createEventBody']>\n>\n\nexport type GetEventProps = Merge<DefaultApiGetEventRequest, {}>\n\nexport type ListEventsProps = Merge<DefaultApiListEventsRequest, {}>\n\nexport type CreateMessageProps = Merge<\n  Except<DefaultApiCreateMessageRequest, 'createMessageBody'>,\n  NonNullable<DefaultApiCreateMessageRequest['createMessageBody']>\n>\n\nexport type GetOrCreateMessageProps = Merge<\n  Except<DefaultApiGetOrCreateMessageRequest, 'getOrCreateMessageBody'>,\n  NonNullable<DefaultApiGetOrCreateMessageRequest['getOrCreateMessageBody']>\n>\n\nexport type GetMessageProps = Merge<DefaultApiGetMessageRequest, {}>\n\nexport type UpdateMessageProps = Merge<\n  Except<DefaultApiUpdateMessageRequest, 'updateMessageBody'>,\n  NonNullable<DefaultApiUpdateMessageRequest['updateMessageBody']>\n>\n\nexport type ListMessagesProps = Merge<DefaultApiListMessagesRequest, {}>\n\nexport type DeleteMessageProps = Merge<DefaultApiDeleteMessageRequest, {}>\n\nexport type CreateUserProps = Merge<\n  Except<DefaultApiCreateUserRequest, 'createUserBody'>,\n  NonNullable<DefaultApiCreateUserRequest['createUserBody']>\n>\n\nexport type GetUserProps = Merge<DefaultApiGetUserRequest, {}>\n\nexport type ListUsersProps = Merge<DefaultApiListUsersRequest, {}>\n\nexport type GetOrCreateUserProps = Merge<\n  Except<DefaultApiGetOrCreateUserRequest, 'getOrCreateUserBody'>,\n  NonNullable<DefaultApiGetOrCreateUserRequest['getOrCreateUserBody']>\n>\n\nexport type UpdateUserProps = Merge<\n  Except<DefaultApiUpdateUserRequest, 'updateUserBody'>,\n  NonNullable<DefaultApiUpdateUserRequest['updateUserBody']>\n>\n\nexport type DeleteUserProps = Merge<DefaultApiDeleteUserRequest, {}>\n\nexport type GetStateProps = Merge<DefaultApiGetStateRequest, {}>\n\nexport type SetStateProps = Merge<\n  Except<DefaultApiSetStateRequest, 'setStateBody'>,\n  NonNullable<DefaultApiSetStateRequest['setStateBody']>\n>\n\nexport type PatchStateProps = Merge<\n  Except<DefaultApiPatchStateRequest, 'patchStateBody'>,\n  NonNullable<DefaultApiPatchStateRequest['patchStateBody']>\n>\n\nexport type CallActionProps = Merge<\n  Except<DefaultApiCallActionRequest, 'callActionBody'>,\n  NonNullable<DefaultApiCallActionRequest['callActionBody']>\n>\n\nexport type ConfigureIntegrationProps = Merge<\n  Except<DefaultApiConfigureIntegrationRequest, 'configureIntegrationBody'>,\n  NonNullable<DefaultApiConfigureIntegrationRequest['configureIntegrationBody']>\n>\n\nexport type ListPublicIntegrationsProps = Merge<DefaultApiListPublicIntegrationsRequest, {}>\n\nexport type GetPublicIntegrationByIdProps = Merge<DefaultApiGetPublicIntegrationByIdRequest, {}>\n\nexport type GetPublicIntegrationProps = Merge<DefaultApiGetPublicIntegrationRequest, {}>\n\nexport type CreateBotProps = Merge<\n  Except<DefaultApiCreateBotRequest, 'createBotBody'>,\n  NonNullable<DefaultApiCreateBotRequest['createBotBody']>\n>\n\nexport type UpdateBotProps = Merge<\n  Except<DefaultApiUpdateBotRequest, 'updateBotBody'>,\n  NonNullable<DefaultApiUpdateBotRequest['updateBotBody']>\n>\n\nexport type TransferBotProps = Merge<\n  Except<DefaultApiTransferBotRequest, 'transferBotBody'>,\n  NonNullable<DefaultApiTransferBotRequest['transferBotBody']>\n>\n\nexport type ListBotsProps = Merge<DefaultApiListBotsRequest, {}>\n\nexport type GetBotProps = Merge<DefaultApiGetBotRequest, {}>\n\nexport type DeleteBotProps = Merge<DefaultApiDeleteBotRequest, {}>\n\nexport type GetBotLogsProps = Merge<DefaultApiGetBotLogsRequest, {}>\n\nexport type GetBotWebchatProps = Merge<DefaultApiGetBotWebchatRequest, {}>\n\nexport type GetBotAnalyticsProps = Merge<DefaultApiGetBotAnalyticsRequest, {}>\n\nexport type GetWorkspaceProps = Merge<DefaultApiGetWorkspaceRequest, {}>\n\nexport type UpdateWorkspaceProps = Merge<\n  Except<DefaultApiUpdateWorkspaceRequest, 'updateWorkspaceBody'>,\n  NonNullable<DefaultApiUpdateWorkspaceRequest['updateWorkspaceBody']>\n>\n\nexport type ListWorkspacesProps = Merge<DefaultApiListWorkspacesRequest, {}>\n\nexport type CreateIntegrationProps = Merge<\n  Except<DefaultApiCreateIntegrationRequest, 'createIntegrationBody'>,\n  NonNullable<DefaultApiCreateIntegrationRequest['createIntegrationBody']>\n>\n\nexport type UpdateIntegrationProps = Merge<\n  Except<DefaultApiUpdateIntegrationRequest, 'updateIntegrationBody'>,\n  NonNullable<DefaultApiUpdateIntegrationRequest['updateIntegrationBody']>\n>\n\nexport type ListIntegrationsProps = Merge<DefaultApiListIntegrationsRequest, {}>\n\nexport type GetIntegrationProps = Merge<DefaultApiGetIntegrationRequest, {}>\n\nexport type GetIntegrationLogsProps = Merge<DefaultApiGetIntegrationLogsRequest, {}>\n\nexport type GetIntegrationByNameProps = Merge<DefaultApiGetIntegrationByNameRequest, {}>\n\nexport type DeleteIntegrationProps = Merge<DefaultApiDeleteIntegrationRequest, {}>\n\nexport type ListWorkspaceMembersProps = Merge<DefaultApiListWorkspaceMembersRequest, {}>\n\nexport type DeleteWorkspaceMemberProps = Merge<DefaultApiDeleteWorkspaceMemberRequest, {}>\n\nexport type CreateWorkspaceMemberProps = Merge<\n  Except<DefaultApiCreateWorkspaceMemberRequest, 'createWorkspaceMemberBody'>,\n  NonNullable<DefaultApiCreateWorkspaceMemberRequest['createWorkspaceMemberBody']>\n>\n\nexport type UpdateWorkspaceMemberProps = Merge<\n  Except<DefaultApiUpdateWorkspaceMemberRequest, 'updateWorkspaceMemberBody'>,\n  NonNullable<DefaultApiUpdateWorkspaceMemberRequest['updateWorkspaceMemberBody']>\n>\n\nexport type IntrospectProps = Merge<\n  Except<DefaultApiIntrospectRequest, 'introspectBody'>,\n  NonNullable<DefaultApiIntrospectRequest['introspectBody']>\n>\n\nexport type CreateFileProps = Merge<\n  Except<DefaultApiCreateFileRequest, 'createFileBody'>,\n  NonNullable<DefaultApiCreateFileRequest['createFileBody']>\n>\n\nexport type GetFileProps = Merge<DefaultApiGetFileRequest, {}>\n\nexport type DownloadFileProps = Merge<DefaultApiDownloadFileRequest, {}>\n\nexport type DeleteFileProps = Merge<DefaultApiDeleteFileRequest, {}>\n\nexport type ListFilesProps = Merge<DefaultApiListFilesRequest, {}>\n\n\nfunction getError(err: Error) {\n  if (axios.isAxiosError(err)) {\n    return errorFrom(err.response?.data)\n  }\n\n  return errorFrom(err)\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Botpress API\n * API for Botpress Cloud\n *\n * The version of the OpenAPI document: 0.3.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// URLSearchParams not necessarily used\n// @ts-ignore\n\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';\n\n/**\n * \n * @export\n * @interface Bot\n */\nexport interface Bot {\n    /**\n     * Id of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof Bot\n     */\n    'id': string;\n    /**\n     * Creation date of the [Bot](#schema_bot) in the ISO 8601 format\n     * @type {string}\n     * @memberof Bot\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Bot](#schema_bot) in the ISO 8601 format\n     * @type {string}\n     * @memberof Bot\n     */\n    'updatedAt': string;\n    /**\n     * Signing secret of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof Bot\n     */\n    'signingSecret': string;\n    /**\n     * A mapping of integrations to their configuration\n     * @type {{ [key: string]: BotIntegrationsValue; }}\n     * @memberof Bot\n     */\n    'integrations': { [key: string]: BotIntegrationsValue; };\n    /**\n     * \n     * @type {BotUser}\n     * @memberof Bot\n     */\n    'user': BotUser;\n    /**\n     * \n     * @type {BotConversation}\n     * @memberof Bot\n     */\n    'conversation': BotConversation;\n    /**\n     * \n     * @type {BotMessage}\n     * @memberof Bot\n     */\n    'message': BotMessage;\n    /**\n     * A mapping of states to their definition\n     * @type {{ [key: string]: CreateBotBodyStatesValue; }}\n     * @memberof Bot\n     */\n    'states': { [key: string]: CreateBotBodyStatesValue; };\n    /**\n     * \n     * @type {BotConfiguration}\n     * @memberof Bot\n     */\n    'configuration': BotConfiguration;\n    /**\n     * Events definition\n     * @type {{ [key: string]: CreateBotBodyEventsValue; }}\n     * @memberof Bot\n     */\n    'events': { [key: string]: CreateBotBodyEventsValue; };\n    /**\n     * Recurring events\n     * @type {{ [key: string]: CreateBotBodyRecurringEventsValue; }}\n     * @memberof Bot\n     */\n    'recurringEvents': { [key: string]: CreateBotBodyRecurringEventsValue; };\n    /**\n     * Name of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof Bot\n     */\n    'name': string;\n    /**\n     * Last deployment date of the [Bot](#schema_bot) in the ISO 8601 format\n     * @type {string}\n     * @memberof Bot\n     */\n    'deployedAt'?: string;\n    /**\n     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations\n     * @type {boolean}\n     * @memberof Bot\n     */\n    'dev': boolean;\n    /**\n     * Id of the user that created the bot\n     * @type {string}\n     * @memberof Bot\n     */\n    'createdBy'?: string;\n    /**\n     * Media files associated with the [Bot](#schema_bot)\n     * @type {Array<BotMediasInner>}\n     * @memberof Bot\n     */\n    'medias': Array<BotMediasInner>;\n}\n/**\n * Configuration of the bot\n * @export\n * @interface BotConfiguration\n */\nexport interface BotConfiguration {\n    /**\n     * Configuration data\n     * @type {{ [key: string]: any; }}\n     * @memberof BotConfiguration\n     */\n    'data': { [key: string]: any; };\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof BotConfiguration\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * Conversation object configuration\n * @export\n * @interface BotConversation\n */\nexport interface BotConversation {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof BotConversation\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * \n * @export\n * @interface BotIntegrationsValue\n */\nexport interface BotIntegrationsValue {\n    /**\n     * \n     * @type {boolean}\n     * @memberof BotIntegrationsValue\n     */\n    'enabled': boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'version': string;\n    /**\n     * \n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'webhookUrl': string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof BotIntegrationsValue\n     */\n    'configuration': { [key: string]: any; };\n    /**\n     * \n     * @type {string}\n     * @memberof BotIntegrationsValue\n     */\n    'status': BotIntegrationsValueStatusEnum;\n}\n\nexport const BotIntegrationsValueStatusEnum = {\n    RegistrationPending: 'registration_pending',\n    Registered: 'registered',\n    RegistrationFailed: 'registration_failed',\n    UnregistrationPending: 'unregistration_pending',\n    Unregistered: 'unregistered',\n    UnregistrationFailed: 'unregistration_failed'\n} as const;\n\nexport type BotIntegrationsValueStatusEnum = typeof BotIntegrationsValueStatusEnum[keyof typeof BotIntegrationsValueStatusEnum];\n\n/**\n * \n * @export\n * @interface BotMediasInner\n */\nexport interface BotMediasInner {\n    /**\n     * URL of the media file\n     * @type {string}\n     * @memberof BotMediasInner\n     */\n    'url': string;\n    /**\n     * Name of the media file\n     * @type {string}\n     * @memberof BotMediasInner\n     */\n    'name': string;\n}\n/**\n * Message object configuration\n * @export\n * @interface BotMessage\n */\nexport interface BotMessage {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof BotMessage\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * User object configuration\n * @export\n * @interface BotUser\n */\nexport interface BotUser {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof BotUser\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * \n * @export\n * @interface CallActionBody\n */\nexport interface CallActionBody {\n    /**\n     * Type of the action\n     * @type {string}\n     * @memberof CallActionBody\n     */\n    'type': string;\n    /**\n     * Input of the action\n     * @type {{ [key: string]: any; }}\n     * @memberof CallActionBody\n     */\n    'input': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CallActionResponse\n */\nexport interface CallActionResponse {\n    /**\n     * Input of the action\n     * @type {{ [key: string]: any; }}\n     * @memberof CallActionResponse\n     */\n    'output': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface ConfigureIntegrationBody\n */\nexport interface ConfigureIntegrationBody {\n    /**\n     * Unique identifier of the integration that was installed on the bot\n     * @type {string}\n     * @memberof ConfigureIntegrationBody\n     */\n    'identifier': string;\n}\n/**\n * The conversation object represents an exchange of messages between one or more users. A [Conversation](#schema_conversation) is always linked to an integration\\'s channels. For example, a Slack channel represents a conversation.\n * @export\n * @interface Conversation\n */\nexport interface Conversation {\n    /**\n     * Id of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Conversation\n     */\n    'id': string;\n    /**\n     * Creation date of the [Conversation](#schema_conversation) in the ISO 8601 format\n     * @type {string}\n     * @memberof Conversation\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Conversation](#schema_conversation) in the ISO 8601 format\n     * @type {string}\n     * @memberof Conversation\n     */\n    'updatedAt': string;\n    /**\n     * Name of the channel where the [Conversation](#schema_conversation) is happening\n     * @type {string}\n     * @memberof Conversation\n     */\n    'channel': string;\n    /**\n     * Name of the integration that created the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Conversation\n     */\n    'integration': string;\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](#tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof Conversation\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface CreateBotBody\n */\nexport interface CreateBotBody {\n    /**\n     * A mapping of states to their definition\n     * @type {{ [key: string]: CreateBotBodyStatesValue; }}\n     * @memberof CreateBotBody\n     */\n    'states'?: { [key: string]: CreateBotBodyStatesValue; };\n    /**\n     * Events definition\n     * @type {{ [key: string]: CreateBotBodyEventsValue; }}\n     * @memberof CreateBotBody\n     */\n    'events'?: { [key: string]: CreateBotBodyEventsValue; };\n    /**\n     * Recurring events\n     * @type {{ [key: string]: CreateBotBodyRecurringEventsValue; }}\n     * @memberof CreateBotBody\n     */\n    'recurringEvents'?: { [key: string]: CreateBotBodyRecurringEventsValue; };\n    /**\n     * \n     * @type {CreateBotBodyConfiguration}\n     * @memberof CreateBotBody\n     */\n    'configuration'?: CreateBotBodyConfiguration;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateBotBody\n     */\n    'user'?: CreateBotBodyUser;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateBotBody\n     */\n    'conversation'?: CreateBotBodyUser;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateBotBody\n     */\n    'message'?: CreateBotBodyUser;\n    /**\n     * JavaScript code of the bot\n     * @type {string}\n     * @memberof CreateBotBody\n     */\n    'code'?: string;\n    /**\n     * Optional name for the bot, if not provided will be auto-generated\n     * @type {string}\n     * @memberof CreateBotBody\n     */\n    'name'?: string;\n    /**\n     * Media files associated with the [Bot](#schema_bot)\n     * @type {Array<CreateBotBodyMediasInner>}\n     * @memberof CreateBotBody\n     */\n    'medias'?: Array<CreateBotBodyMediasInner>;\n    /**\n     * URL of the [Bot](#schema_bot); Only available for dev bots\n     * @type {string}\n     * @memberof CreateBotBody\n     */\n    'url'?: string;\n    /**\n     * Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations\n     * @type {boolean}\n     * @memberof CreateBotBody\n     */\n    'dev'?: boolean;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyConfiguration\n */\nexport interface CreateBotBodyConfiguration {\n    /**\n     * Configuration data\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyConfiguration\n     */\n    'data'?: { [key: string]: any; };\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyConfiguration\n     */\n    'schema'?: { [key: string]: any; };\n}\n/**\n * Event Definition\n * @export\n * @interface CreateBotBodyEventsValue\n */\nexport interface CreateBotBodyEventsValue {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyEventsValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateBotBodyMediasInner\n */\nexport interface CreateBotBodyMediasInner {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateBotBodyMediasInner\n     */\n    'url': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateBotBodyMediasInner\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyRecurringEventsValue\n */\nexport interface CreateBotBodyRecurringEventsValue {\n    /**\n     * \n     * @type {CreateBotBodyRecurringEventsValueSchedule}\n     * @memberof CreateBotBodyRecurringEventsValue\n     */\n    'schedule': CreateBotBodyRecurringEventsValueSchedule;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateBotBodyRecurringEventsValue\n     */\n    'type': string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyRecurringEventsValue\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateBotBodyRecurringEventsValueSchedule\n */\nexport interface CreateBotBodyRecurringEventsValueSchedule {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateBotBodyRecurringEventsValueSchedule\n     */\n    'cron': string;\n}\n/**\n * \n * @export\n * @interface CreateBotBodyStatesValue\n */\nexport interface CreateBotBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `bot`)\n     * @type {string}\n     * @memberof CreateBotBodyStatesValue\n     */\n    'type': CreateBotBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateBotBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof CreateBotBodyStatesValue\n     */\n    'expiry'?: number;\n}\n\nexport const CreateBotBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot'\n} as const;\n\nexport type CreateBotBodyStatesValueTypeEnum = typeof CreateBotBodyStatesValueTypeEnum[keyof typeof CreateBotBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface CreateBotBodyUser\n */\nexport interface CreateBotBodyUser {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof CreateBotBodyUser\n     */\n    'tags'?: { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * Definition of a tag that can be provided on the object\n * @export\n * @interface CreateBotBodyUserTagsValue\n */\nexport interface CreateBotBodyUserTagsValue {\n    /**\n     * Title of the tag\n     * @type {string}\n     * @memberof CreateBotBodyUserTagsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the tag\n     * @type {string}\n     * @memberof CreateBotBodyUserTagsValue\n     */\n    'description'?: string;\n}\n/**\n * \n * @export\n * @interface CreateBotResponse\n */\nexport interface CreateBotResponse {\n    /**\n     * \n     * @type {Bot}\n     * @memberof CreateBotResponse\n     */\n    'bot': Bot;\n}\n/**\n * \n * @export\n * @interface CreateConversationBody\n */\nexport interface CreateConversationBody {\n    /**\n     * Channel name\n     * @type {string}\n     * @memberof CreateConversationBody\n     */\n    'channel': string;\n    /**\n     * Tags for the [Conversation](#schema_conversation)\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateConversationBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * Name of the integration to which the conversation creation will be delegated\n     * @type {string}\n     * @memberof CreateConversationBody\n     */\n    'integrationName'?: string;\n}\n/**\n * \n * @export\n * @interface CreateConversationResponse\n */\nexport interface CreateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof CreateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface CreateEventBody\n */\nexport interface CreateEventBody {\n    /**\n     * Type of the [Event](#schema_event).\n     * @type {string}\n     * @memberof CreateEventBody\n     */\n    'type': string;\n    /**\n     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our API.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateEventBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * \n     * @type {CreateEventBodySchedule}\n     * @memberof CreateEventBody\n     */\n    'schedule'?: CreateEventBodySchedule;\n}\n/**\n * Schedule the Event to be sent at a specific time. Either dateTime or delay must be provided.\n * @export\n * @interface CreateEventBodySchedule\n */\nexport interface CreateEventBodySchedule {\n    /**\n     * When the [Event](#schema_event) will be sent, in the ISO 8601 format\n     * @type {string}\n     * @memberof CreateEventBodySchedule\n     */\n    'dateTime'?: string;\n    /**\n     * Delay in milliseconds before sending the [Event](#schema_event)\n     * @type {number}\n     * @memberof CreateEventBodySchedule\n     */\n    'delay'?: number;\n}\n/**\n * \n * @export\n * @interface CreateEventResponse\n */\nexport interface CreateEventResponse {\n    /**\n     * \n     * @type {Event}\n     * @memberof CreateEventResponse\n     */\n    'event': Event;\n}\n/**\n * \n * @export\n * @interface CreateFileBody\n */\nexport interface CreateFileBody {\n    /**\n     * ID of the bot the file will be used for\n     * @type {string}\n     * @memberof CreateFileBody\n     */\n    'botId': string;\n    /**\n     * Base64-encoded file contents\n     * @type {string}\n     * @memberof CreateFileBody\n     */\n    'contents': string;\n    /**\n     * Optional arbitrary file name (e.g. my-image.jpg), will be used for display purposes only.\n     * @type {string}\n     * @memberof CreateFileBody\n     */\n    'name': string;\n    /**\n     * Accepted values: private, public\n     * @type {string}\n     * @memberof CreateFileBody\n     */\n    'accessType': CreateFileBodyAccessTypeEnum;\n}\n\nexport const CreateFileBodyAccessTypeEnum = {\n    Private: 'private',\n    Public: 'public'\n} as const;\n\nexport type CreateFileBodyAccessTypeEnum = typeof CreateFileBodyAccessTypeEnum[keyof typeof CreateFileBodyAccessTypeEnum];\n\n/**\n * \n * @export\n * @interface CreateFileResponse\n */\nexport interface CreateFileResponse {\n    /**\n     * \n     * @type {any}\n     * @memberof CreateFileResponse\n     */\n    'file': any;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBody\n */\nexport interface CreateIntegrationBody {\n    /**\n     * Name of the [Integration](#schema_integration)\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'name': string;\n    /**\n     * Version of the [Integration](#schema_integration)\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'version': string;\n    /**\n     * \n     * @type {CreateIntegrationBodyConfiguration}\n     * @memberof CreateIntegrationBody\n     */\n    'configuration'?: CreateIntegrationBodyConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyStatesValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'states'?: { [key: string]: CreateIntegrationBodyStatesValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyEventsValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'events'?: { [key: string]: CreateBotBodyEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyActionsValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'actions'?: { [key: string]: CreateIntegrationBodyActionsValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyChannelsValue; }}\n     * @memberof CreateIntegrationBody\n     */\n    'channels'?: { [key: string]: CreateIntegrationBodyChannelsValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyUser}\n     * @memberof CreateIntegrationBody\n     */\n    'user'?: CreateIntegrationBodyUser;\n    /**\n     * JavaScript code of the integration\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'code'?: string;\n    /**\n     * URL of the integration; Only available for dev integrations\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'url'?: string;\n    /**\n     * Indicates if the integration is a development integration; Dev integrations run locally\n     * @type {boolean}\n     * @memberof CreateIntegrationBody\n     */\n    'dev'?: boolean;\n    /**\n     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'icon'?: string;\n    /**\n     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'readme'?: string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'title'?: string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof CreateIntegrationBody\n     */\n    'description'?: string;\n}\n/**\n * Action definition\n * @export\n * @interface CreateIntegrationBodyActionsValue\n */\nexport interface CreateIntegrationBodyActionsValue {\n    /**\n     * \n     * @type {CreateIntegrationBodyActionsValueInput}\n     * @memberof CreateIntegrationBodyActionsValue\n     */\n    'input': CreateIntegrationBodyActionsValueInput;\n    /**\n     * \n     * @type {CreateIntegrationBodyActionsValueInput}\n     * @memberof CreateIntegrationBodyActionsValue\n     */\n    'output': CreateIntegrationBodyActionsValueInput;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyActionsValueInput\n */\nexport interface CreateIntegrationBodyActionsValueInput {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateIntegrationBodyActionsValueInput\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyChannelsValue\n */\nexport interface CreateIntegrationBodyChannelsValue {\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; }}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'messages': { [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyChannelsValueConversation}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'conversation'?: CreateIntegrationBodyChannelsValueConversation;\n    /**\n     * \n     * @type {CreateBotBodyUser}\n     * @memberof CreateIntegrationBodyChannelsValue\n     */\n    'message'?: CreateBotBodyUser;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationBodyChannelsValueConversation\n */\nexport interface CreateIntegrationBodyChannelsValueConversation {\n    /**\n     * \n     * @type {CreateIntegrationBodyChannelsValueConversationCreation}\n     * @memberof CreateIntegrationBodyChannelsValueConversation\n     */\n    'creation'?: CreateIntegrationBodyChannelsValueConversationCreation;\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof CreateIntegrationBodyChannelsValueConversation\n     */\n    'tags'?: { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.\n * @export\n * @interface CreateIntegrationBodyChannelsValueConversationCreation\n */\nexport interface CreateIntegrationBodyChannelsValueConversationCreation {\n    /**\n     * Enable conversation creation\n     * @type {boolean}\n     * @memberof CreateIntegrationBodyChannelsValueConversationCreation\n     */\n    'enabled': boolean;\n    /**\n     * The list of tags that are required to be specified when calling the API directly to create a conversation.\n     * @type {Array<string>}\n     * @memberof CreateIntegrationBodyChannelsValueConversationCreation\n     */\n    'requiredTags': Array<string>;\n}\n/**\n * Message definition\n * @export\n * @interface CreateIntegrationBodyChannelsValueMessagesValue\n */\nexport interface CreateIntegrationBodyChannelsValueMessagesValue {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateIntegrationBodyChannelsValueMessagesValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * Configuration definition\n * @export\n * @interface CreateIntegrationBodyConfiguration\n */\nexport interface CreateIntegrationBodyConfiguration {\n    /**\n     * Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateIntegrationBodyConfiguration\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * State definition\n * @export\n * @interface CreateIntegrationBodyStatesValue\n */\nexport interface CreateIntegrationBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)\n     * @type {string}\n     * @memberof CreateIntegrationBodyStatesValue\n     */\n    'type': CreateIntegrationBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateIntegrationBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n}\n\nexport const CreateIntegrationBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Integration: 'integration'\n} as const;\n\nexport type CreateIntegrationBodyStatesValueTypeEnum = typeof CreateIntegrationBodyStatesValueTypeEnum[keyof typeof CreateIntegrationBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface CreateIntegrationBodyUser\n */\nexport interface CreateIntegrationBodyUser {\n    /**\n     * \n     * @type {CreateIntegrationBodyUserCreation}\n     * @memberof CreateIntegrationBodyUser\n     */\n    'creation'?: CreateIntegrationBodyUserCreation;\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof CreateIntegrationBodyUser\n     */\n    'tags'?: { [key: string]: CreateBotBodyUserTagsValue; };\n}\n/**\n * The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.\n * @export\n * @interface CreateIntegrationBodyUserCreation\n */\nexport interface CreateIntegrationBodyUserCreation {\n    /**\n     * Enable user creation\n     * @type {boolean}\n     * @memberof CreateIntegrationBodyUserCreation\n     */\n    'enabled': boolean;\n    /**\n     * The list of tags that are required to be specified when calling the API directly to create a user.\n     * @type {Array<string>}\n     * @memberof CreateIntegrationBodyUserCreation\n     */\n    'requiredTags': Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateIntegrationResponse\n */\nexport interface CreateIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof CreateIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface CreateMessageBody\n */\nexport interface CreateMessageBody {\n    /**\n     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location\n     * @type {{ [key: string]: any; }}\n     * @memberof CreateMessageBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * ID of the [User](#schema_user)\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'userId': string;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'conversationId': string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'type': string;\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](#tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateMessageBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * \n     * @type {CreateMessageBodySchedule}\n     * @memberof CreateMessageBody\n     */\n    'schedule'?: CreateMessageBodySchedule;\n}\n/**\n * Schedule the Message to be sent at a specific time. Either dateTime or delay must be provided.\n * @export\n * @interface CreateMessageBodySchedule\n */\nexport interface CreateMessageBodySchedule {\n    /**\n     * When the [Message](#schema_message) will be sent, in the ISO 8601 format\n     * @type {string}\n     * @memberof CreateMessageBodySchedule\n     */\n    'dateTime'?: string;\n    /**\n     * Delay in milliseconds before sending the [Message](#schema_message)\n     * @type {number}\n     * @memberof CreateMessageBodySchedule\n     */\n    'delay'?: number;\n}\n/**\n * \n * @export\n * @interface CreateMessageResponse\n */\nexport interface CreateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof CreateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface CreateUserBody\n */\nexport interface CreateUserBody {\n    /**\n     * Tags for the [User](#schema_user)\n     * @type {{ [key: string]: string; }}\n     * @memberof CreateUserBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * Name of the integration to which the user creation will be delegated\n     * @type {string}\n     * @memberof CreateUserBody\n     */\n    'integrationName'?: string;\n}\n/**\n * \n * @export\n * @interface CreateUserResponse\n */\nexport interface CreateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof CreateUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface CreateWorkspaceMemberBody\n */\nexport interface CreateWorkspaceMemberBody {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberBody\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberBody\n     */\n    'role': CreateWorkspaceMemberBodyRoleEnum;\n}\n\nexport const CreateWorkspaceMemberBodyRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type CreateWorkspaceMemberBodyRoleEnum = typeof CreateWorkspaceMemberBodyRoleEnum[keyof typeof CreateWorkspaceMemberBodyRoleEnum];\n\n/**\n * \n * @export\n * @interface CreateWorkspaceMemberResponse\n */\nexport interface CreateWorkspaceMemberResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateWorkspaceMemberResponse\n     */\n    'role': CreateWorkspaceMemberResponseRoleEnum;\n}\n\nexport const CreateWorkspaceMemberResponseRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type CreateWorkspaceMemberResponseRoleEnum = typeof CreateWorkspaceMemberResponseRoleEnum[keyof typeof CreateWorkspaceMemberResponseRoleEnum];\n\n/**\n * The event object represents an action or an occurrence.\n * @export\n * @interface Event\n */\nexport interface Event {\n    /**\n     * Id of the [Event](#schema_event)\n     * @type {string}\n     * @memberof Event\n     */\n    'id': string;\n    /**\n     * Creation date of the [Event](#schema_event) in the ISO 8601 format\n     * @type {string}\n     * @memberof Event\n     */\n    'createdAt': string;\n    /**\n     * Type of the [Event](#schema_event).\n     * @type {string}\n     * @memberof Event\n     */\n    'type': string;\n    /**\n     * Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our api.\n     * @type {{ [key: string]: any; }}\n     * @memberof Event\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface GetBotAnalyticsResponse\n */\nexport interface GetBotAnalyticsResponse {\n    /**\n     * \n     * @type {Array<GetBotAnalyticsResponseRecordsInner>}\n     * @memberof GetBotAnalyticsResponse\n     */\n    'records': Array<GetBotAnalyticsResponseRecordsInner>;\n}\n/**\n * \n * @export\n * @interface GetBotAnalyticsResponseRecordsInner\n */\nexport interface GetBotAnalyticsResponseRecordsInner {\n    /**\n     * ISO 8601 date string of the beginning (inclusive) of the period\n     * @type {string}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'startDateTimeUtc': string;\n    /**\n     * ISO 8601 date string of the end (exclusive) of the period\n     * @type {string}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'endDateTimeUtc': string;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'returningUsers': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'newUsers': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'sessions': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetBotAnalyticsResponseRecordsInner\n     */\n    'messages': number;\n}\n/**\n * \n * @export\n * @interface GetBotLogsResponse\n */\nexport interface GetBotLogsResponse {\n    /**\n     * \n     * @type {Array<GetBotLogsResponseLogsInner>}\n     * @memberof GetBotLogsResponse\n     */\n    'logs': Array<GetBotLogsResponseLogsInner>;\n}\n/**\n * \n * @export\n * @interface GetBotLogsResponseLogsInner\n */\nexport interface GetBotLogsResponseLogsInner {\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponseLogsInner\n     */\n    'timestamp': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponseLogsInner\n     */\n    'level': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotLogsResponseLogsInner\n     */\n    'message': string;\n}\n/**\n * \n * @export\n * @interface GetBotResponse\n */\nexport interface GetBotResponse {\n    /**\n     * \n     * @type {Bot}\n     * @memberof GetBotResponse\n     */\n    'bot': Bot;\n}\n/**\n * \n * @export\n * @interface GetBotWebchatResponse\n */\nexport interface GetBotWebchatResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GetBotWebchatResponse\n     */\n    'code': string;\n}\n/**\n * \n * @export\n * @interface GetConversationResponse\n */\nexport interface GetConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof GetConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface GetEventResponse\n */\nexport interface GetEventResponse {\n    /**\n     * \n     * @type {Event}\n     * @memberof GetEventResponse\n     */\n    'event': Event;\n}\n/**\n * \n * @export\n * @interface GetFileResponse\n */\nexport interface GetFileResponse {\n    /**\n     * \n     * @type {any}\n     * @memberof GetFileResponse\n     */\n    'file': any;\n}\n/**\n * \n * @export\n * @interface GetIntegrationByNameResponse\n */\nexport interface GetIntegrationByNameResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetIntegrationByNameResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetIntegrationLogsResponse\n */\nexport interface GetIntegrationLogsResponse {\n    /**\n     * \n     * @type {Array<GetBotLogsResponseLogsInner>}\n     * @memberof GetIntegrationLogsResponse\n     */\n    'logs': Array<GetBotLogsResponseLogsInner>;\n}\n/**\n * \n * @export\n * @interface GetIntegrationResponse\n */\nexport interface GetIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetMessageResponse\n */\nexport interface GetMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof GetMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface GetOrCreateConversationBody\n */\nexport interface GetOrCreateConversationBody {\n    /**\n     * Channel name\n     * @type {string}\n     * @memberof GetOrCreateConversationBody\n     */\n    'channel': string;\n    /**\n     * Tags for the [Conversation](#schema_conversation)\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateConversationBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * Name of the integration to which the conversation creation will be delegated\n     * @type {string}\n     * @memberof GetOrCreateConversationBody\n     */\n    'integrationName'?: string;\n}\n/**\n * \n * @export\n * @interface GetOrCreateConversationResponse\n */\nexport interface GetOrCreateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof GetOrCreateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface GetOrCreateMessageBody\n */\nexport interface GetOrCreateMessageBody {\n    /**\n     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location\n     * @type {{ [key: string]: any; }}\n     * @memberof GetOrCreateMessageBody\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * ID of the [User](#schema_user)\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'userId': string;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'conversationId': string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'type': string;\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](#tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateMessageBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * \n     * @type {CreateMessageBodySchedule}\n     * @memberof GetOrCreateMessageBody\n     */\n    'schedule'?: CreateMessageBodySchedule;\n}\n/**\n * \n * @export\n * @interface GetOrCreateMessageResponse\n */\nexport interface GetOrCreateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof GetOrCreateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface GetOrCreateUserBody\n */\nexport interface GetOrCreateUserBody {\n    /**\n     * Tags for the [User](#schema_user)\n     * @type {{ [key: string]: string; }}\n     * @memberof GetOrCreateUserBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * Name of the integration to which the user creation will be delegated\n     * @type {string}\n     * @memberof GetOrCreateUserBody\n     */\n    'integrationName'?: string;\n}\n/**\n * \n * @export\n * @interface GetOrCreateUserResponse\n */\nexport interface GetOrCreateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetOrCreateUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface GetPublicIntegrationByIdResponse\n */\nexport interface GetPublicIntegrationByIdResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetPublicIntegrationByIdResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetPublicIntegrationResponse\n */\nexport interface GetPublicIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof GetPublicIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface GetStateResponse\n */\nexport interface GetStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof GetStateResponse\n     */\n    'state': State;\n}\n/**\n * \n * @export\n * @interface GetUserResponse\n */\nexport interface GetUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface GetWorkspaceResponse\n */\nexport interface GetWorkspaceResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetWorkspaceResponse\n     */\n    'accountType': GetWorkspaceResponseAccountTypeEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GetWorkspaceResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof GetWorkspaceResponse\n     */\n    'spendingLimit': number;\n}\n\nexport const GetWorkspaceResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type GetWorkspaceResponseAccountTypeEnum = typeof GetWorkspaceResponseAccountTypeEnum[keyof typeof GetWorkspaceResponseAccountTypeEnum];\n\n/**\n * \n * @export\n * @interface Integration\n */\nexport interface Integration {\n    /**\n     * Id of the [Integration](#schema_integration)\n     * @type {string}\n     * @memberof Integration\n     */\n    'id': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in the ISO 8601 format\n     * @type {string}\n     * @memberof Integration\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in the ISO 8601 format\n     * @type {string}\n     * @memberof Integration\n     */\n    'updatedAt': string;\n    /**\n     * Name of the [Integration](#schema_integration)\n     * @type {string}\n     * @memberof Integration\n     */\n    'name': string;\n    /**\n     * Version of the [Integration](#schema_integration)\n     * @type {string}\n     * @memberof Integration\n     */\n    'version': string;\n    /**\n     * \n     * @type {CreateIntegrationBodyConfiguration}\n     * @memberof Integration\n     */\n    'configuration': CreateIntegrationBodyConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: IntegrationChannelsValue; }}\n     * @memberof Integration\n     */\n    'channels': { [key: string]: IntegrationChannelsValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyStatesValue; }}\n     * @memberof Integration\n     */\n    'states': { [key: string]: CreateIntegrationBodyStatesValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyEventsValue; }}\n     * @memberof Integration\n     */\n    'events': { [key: string]: CreateBotBodyEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyActionsValue; }}\n     * @memberof Integration\n     */\n    'actions': { [key: string]: CreateIntegrationBodyActionsValue; };\n    /**\n     * \n     * @type {IntegrationUser}\n     * @memberof Integration\n     */\n    'user': IntegrationUser;\n    /**\n     * Indicates if the integration is a development integration; Dev integrations run locally\n     * @type {boolean}\n     * @memberof Integration\n     */\n    'dev': boolean;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'iconUrl': string;\n    /**\n     * URL of the readme of the integration. This is the readme that will be displayed in the UI\n     * @type {string}\n     * @memberof Integration\n     */\n    'readmeUrl': string;\n}\n/**\n * Channel definition\n * @export\n * @interface IntegrationChannelsValue\n */\nexport interface IntegrationChannelsValue {\n    /**\n     * \n     * @type {{ [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; }}\n     * @memberof IntegrationChannelsValue\n     */\n    'messages': { [key: string]: CreateIntegrationBodyChannelsValueMessagesValue; };\n    /**\n     * \n     * @type {IntegrationChannelsValueConversation}\n     * @memberof IntegrationChannelsValue\n     */\n    'conversation': IntegrationChannelsValueConversation;\n    /**\n     * \n     * @type {BotMessage}\n     * @memberof IntegrationChannelsValue\n     */\n    'message': BotMessage;\n}\n/**\n * Conversation object configuration\n * @export\n * @interface IntegrationChannelsValueConversation\n */\nexport interface IntegrationChannelsValueConversation {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof IntegrationChannelsValueConversation\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyChannelsValueConversationCreation}\n     * @memberof IntegrationChannelsValueConversation\n     */\n    'creation': CreateIntegrationBodyChannelsValueConversationCreation;\n}\n/**\n * User object configuration\n * @export\n * @interface IntegrationUser\n */\nexport interface IntegrationUser {\n    /**\n     * \n     * @type {{ [key: string]: CreateBotBodyUserTagsValue; }}\n     * @memberof IntegrationUser\n     */\n    'tags': { [key: string]: CreateBotBodyUserTagsValue; };\n    /**\n     * \n     * @type {CreateIntegrationBodyUserCreation}\n     * @memberof IntegrationUser\n     */\n    'creation': CreateIntegrationBodyUserCreation;\n}\n/**\n * \n * @export\n * @interface IntrospectBody\n */\nexport interface IntrospectBody {\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectBody\n     */\n    'botId': string;\n}\n/**\n * \n * @export\n * @interface IntrospectResponse\n */\nexport interface IntrospectResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectResponse\n     */\n    'workspaceId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectResponse\n     */\n    'botId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IntrospectResponse\n     */\n    'userId': string;\n}\n/**\n * \n * @export\n * @interface ListBotsResponse\n */\nexport interface ListBotsResponse {\n    /**\n     * \n     * @type {Array<ListBotsResponseBotsInner>}\n     * @memberof ListBotsResponse\n     */\n    'bots': Array<ListBotsResponseBotsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListBotsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListBotsResponseBotsInner\n */\nexport interface ListBotsResponseBotsInner {\n    /**\n     * Id of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'id': string;\n    /**\n     * Creation date of the [Bot](#schema_bot) in the ISO 8601 format\n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Bot](#schema_bot) in the ISO 8601 format\n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListBotsResponseBotsInner\n     */\n    'deployedAt'?: string;\n}\n/**\n * \n * @export\n * @interface ListConversationsResponse\n */\nexport interface ListConversationsResponse {\n    /**\n     * \n     * @type {Array<Conversation>}\n     * @memberof ListConversationsResponse\n     */\n    'conversations': Array<Conversation>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListConversationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListConversationsResponseMeta\n */\nexport interface ListConversationsResponseMeta {\n    /**\n     * The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint.\n     * @type {string}\n     * @memberof ListConversationsResponseMeta\n     */\n    'nextToken'?: string;\n}\n/**\n * \n * @export\n * @interface ListEventsResponse\n */\nexport interface ListEventsResponse {\n    /**\n     * \n     * @type {Array<Event>}\n     * @memberof ListEventsResponse\n     */\n    'events': Array<Event>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListEventsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListFilesResponse\n */\nexport interface ListFilesResponse {\n    /**\n     * \n     * @type {Array<any>}\n     * @memberof ListFilesResponse\n     */\n    'files': Array<any>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListFilesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListIntegrationsResponse\n */\nexport interface ListIntegrationsResponse {\n    /**\n     * \n     * @type {Array<ListPublicIntegrationsResponseIntegrationsInner>}\n     * @memberof ListIntegrationsResponse\n     */\n    'integrations': Array<ListPublicIntegrationsResponseIntegrationsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListIntegrationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListMessagesResponse\n */\nexport interface ListMessagesResponse {\n    /**\n     * \n     * @type {Array<Message>}\n     * @memberof ListMessagesResponse\n     */\n    'messages': Array<Message>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListMessagesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListPublicIntegrationsResponse\n */\nexport interface ListPublicIntegrationsResponse {\n    /**\n     * \n     * @type {Array<ListPublicIntegrationsResponseIntegrationsInner>}\n     * @memberof ListPublicIntegrationsResponse\n     */\n    'integrations': Array<ListPublicIntegrationsResponseIntegrationsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListPublicIntegrationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListPublicIntegrationsResponseIntegrationsInner\n */\nexport interface ListPublicIntegrationsResponseIntegrationsInner {\n    /**\n     * Id of the [Integration](#schema_integration)\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'id': string;\n    /**\n     * Name of the [Integration](#schema_integration)\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'name': string;\n    /**\n     * Version of the [Integration](#schema_integration)\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'version': string;\n    /**\n     * Creation date of the [Integration](#schema_integration) in the ISO 8601 format\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Integration](#schema_integration) in the ISO 8601 format\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'updatedAt': string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'title': string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'description': string;\n    /**\n     * URL of the icon of the integration. This is the icon that will be displayed in the UI\n     * @type {string}\n     * @memberof ListPublicIntegrationsResponseIntegrationsInner\n     */\n    'iconUrl': string;\n}\n/**\n * \n * @export\n * @interface ListUsersResponse\n */\nexport interface ListUsersResponse {\n    /**\n     * \n     * @type {Array<User>}\n     * @memberof ListUsersResponse\n     */\n    'users': Array<User>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListUsersResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceMembersResponse\n */\nexport interface ListWorkspaceMembersResponse {\n    /**\n     * \n     * @type {Array<ListWorkspaceMembersResponseMembersInner>}\n     * @memberof ListWorkspaceMembersResponse\n     */\n    'members': Array<ListWorkspaceMembersResponseMembersInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListWorkspaceMembersResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListWorkspaceMembersResponseMembersInner\n */\nexport interface ListWorkspaceMembersResponseMembersInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspaceMembersResponseMembersInner\n     */\n    'role': ListWorkspaceMembersResponseMembersInnerRoleEnum;\n}\n\nexport const ListWorkspaceMembersResponseMembersInnerRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type ListWorkspaceMembersResponseMembersInnerRoleEnum = typeof ListWorkspaceMembersResponseMembersInnerRoleEnum[keyof typeof ListWorkspaceMembersResponseMembersInnerRoleEnum];\n\n/**\n * \n * @export\n * @interface ListWorkspacesResponse\n */\nexport interface ListWorkspacesResponse {\n    /**\n     * \n     * @type {Array<ListWorkspacesResponseWorkspacesInner>}\n     * @memberof ListWorkspacesResponse\n     */\n    'workspaces': Array<ListWorkspacesResponseWorkspacesInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListWorkspacesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListWorkspacesResponseWorkspacesInner\n */\nexport interface ListWorkspacesResponseWorkspacesInner {\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspacesResponseWorkspacesInner\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspacesResponseWorkspacesInner\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspacesResponseWorkspacesInner\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspacesResponseWorkspacesInner\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspacesResponseWorkspacesInner\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ListWorkspacesResponseWorkspacesInner\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ListWorkspacesResponseWorkspacesInner\n     */\n    'accountType': ListWorkspacesResponseWorkspacesInnerAccountTypeEnum;\n}\n\nexport const ListWorkspacesResponseWorkspacesInnerAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type ListWorkspacesResponseWorkspacesInnerAccountTypeEnum = typeof ListWorkspacesResponseWorkspacesInnerAccountTypeEnum[keyof typeof ListWorkspacesResponseWorkspacesInnerAccountTypeEnum];\n\n/**\n * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).\n * @export\n * @interface Message\n */\nexport interface Message {\n    /**\n     * Id of the [Message](#schema_message)\n     * @type {string}\n     * @memberof Message\n     */\n    'id': string;\n    /**\n     * Creation date of the [Message](#schema_message) in the ISO 8601 format\n     * @type {string}\n     * @memberof Message\n     */\n    'createdAt': string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof Message\n     */\n    'type': string;\n    /**\n     * Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location\n     * @type {{ [key: string]: any; }}\n     * @memberof Message\n     */\n    'payload': { [key: string]: any; };\n    /**\n     * Direction of the message (`incoming` or `outgoing`).\n     * @type {string}\n     * @memberof Message\n     */\n    'direction': MessageDirectionEnum;\n    /**\n     * ID of the [User](#schema_user)\n     * @type {string}\n     * @memberof Message\n     */\n    'userId': string;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Message\n     */\n    'conversationId': string;\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](#tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof Message\n     */\n    'tags': { [key: string]: string; };\n}\n\nexport const MessageDirectionEnum = {\n    Incoming: 'incoming',\n    Outgoing: 'outgoing'\n} as const;\n\nexport type MessageDirectionEnum = typeof MessageDirectionEnum[keyof typeof MessageDirectionEnum];\n\n/**\n * \n * @export\n * @interface ModelFile\n */\nexport interface ModelFile {\n    /**\n     * ID of the bot the file will be used for\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'botId': string;\n    /**\n     * Optional arbitrary file name (e.g. my-image.jpg), will be used for display purposes only.\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'name': string;\n    /**\n     * Accepted values: private, public\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'accessType': ModelFileAccessTypeEnum;\n    /**\n     * ID of the [File](#schema_file)\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'id': string;\n    /**\n     * Creation date of the [File](#schema_file) in ISO 8601 format\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'createdAt': string;\n    /**\n     * Size of the file in bytes\n     * @type {number}\n     * @memberof ModelFile\n     */\n    'size': number;\n    /**\n     * Public URL to the file contents, available only if the access type is public. If the file is private, use the Download endpoint to retrieve the file contents.\n     * @type {string}\n     * @memberof ModelFile\n     */\n    'publicUrl'?: string;\n}\n\nexport const ModelFileAccessTypeEnum = {\n    Private: 'private',\n    Public: 'public'\n} as const;\n\nexport type ModelFileAccessTypeEnum = typeof ModelFileAccessTypeEnum[keyof typeof ModelFileAccessTypeEnum];\n\n/**\n * \n * @export\n * @interface PatchStateBody\n */\nexport interface PatchStateBody {\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof PatchStateBody\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface PatchStateResponse\n */\nexport interface PatchStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof PatchStateResponse\n     */\n    'state': State;\n}\n/**\n * \n * @export\n * @interface SetStateBody\n */\nexport interface SetStateBody {\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof SetStateBody\n     */\n    'payload': { [key: string]: any; } | null;\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof SetStateBody\n     */\n    'expiry'?: number;\n}\n/**\n * \n * @export\n * @interface SetStateResponse\n */\nexport interface SetStateResponse {\n    /**\n     * \n     * @type {State}\n     * @memberof SetStateResponse\n     */\n    'state': State;\n}\n/**\n * The state object represents the current payload. A state is always linked to either a bot, a conversation or a user.\n * @export\n * @interface State\n */\nexport interface State {\n    /**\n     * Id of the [State](#schema_state)\n     * @type {string}\n     * @memberof State\n     */\n    'id': string;\n    /**\n     * Creation date of the [State](#schema_state) in the ISO 8601 format\n     * @type {string}\n     * @memberof State\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [State](#schema_state) in the ISO 8601 format\n     * @type {string}\n     * @memberof State\n     */\n    'updatedAt': string;\n    /**\n     * Id of the [Bot](#schema_bot)\n     * @type {string}\n     * @memberof State\n     */\n    'botId': string;\n    /**\n     * Id of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof State\n     */\n    'conversationId'?: string;\n    /**\n     * Id of the [User](#schema_user)\n     * @type {string}\n     * @memberof State\n     */\n    'userId'?: string;\n    /**\n     * Name of the [State](#schema_state) which is declared inside the bot definition\n     * @type {string}\n     * @memberof State\n     */\n    'name': string;\n    /**\n     * Type of the [State](#schema_state) represents the resource type (`conversation`, `user`, `bot` or `integration`) that the state is related to\n     * @type {string}\n     * @memberof State\n     */\n    'type': StateTypeEnum;\n    /**\n     * Payload is the content of the state defined by your bot.\n     * @type {{ [key: string]: any; }}\n     * @memberof State\n     */\n    'payload': { [key: string]: any; };\n}\n\nexport const StateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration'\n} as const;\n\nexport type StateTypeEnum = typeof StateTypeEnum[keyof typeof StateTypeEnum];\n\n/**\n * \n * @export\n * @interface TransferBotBody\n */\nexport interface TransferBotBody {\n    /**\n     * The ID of the workspace you want to transfer the bot to.\n     * @type {string}\n     * @memberof TransferBotBody\n     */\n    'targetWorkspaceId': string;\n}\n/**\n * \n * @export\n * @interface UpdateBotBody\n */\nexport interface UpdateBotBody {\n    /**\n     * URL of the [Bot](#schema_bot); Only available for dev bots\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'url'?: string;\n    /**\n     * Type of the [Bot](#schema_bot) authentication (`iam`)\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'authentication'?: UpdateBotBodyAuthenticationEnum;\n    /**\n     * \n     * @type {CreateBotBodyConfiguration}\n     * @memberof UpdateBotBody\n     */\n    'configuration'?: CreateBotBodyConfiguration;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateBotBody\n     */\n    'blocked'?: boolean;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateBotBody\n     */\n    'user'?: UpdateBotBodyUser;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateBotBody\n     */\n    'message'?: UpdateBotBodyUser;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateBotBody\n     */\n    'conversation'?: UpdateBotBodyUser;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyEventsValue; }}\n     * @memberof UpdateBotBody\n     */\n    'events'?: { [key: string]: UpdateBotBodyEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyStatesValue; }}\n     * @memberof UpdateBotBody\n     */\n    'states'?: { [key: string]: UpdateBotBodyStatesValue; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyRecurringEventsValue; }}\n     * @memberof UpdateBotBody\n     */\n    'recurringEvents'?: { [key: string]: UpdateBotBodyRecurringEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyIntegrationsValue; }}\n     * @memberof UpdateBotBody\n     */\n    'integrations'?: { [key: string]: UpdateBotBodyIntegrationsValue; };\n    /**\n     * JavaScript code of the bot\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'code'?: string;\n    /**\n     * Optional name for the bot, if not provided will be auto-generated\n     * @type {string}\n     * @memberof UpdateBotBody\n     */\n    'name'?: string;\n    /**\n     * Media files associated with the [Bot](#schema_bot)\n     * @type {Array<CreateBotBodyMediasInner>}\n     * @memberof UpdateBotBody\n     */\n    'medias'?: Array<CreateBotBodyMediasInner>;\n}\n\nexport const UpdateBotBodyAuthenticationEnum = {\n    Iam: 'iam'\n} as const;\n\nexport type UpdateBotBodyAuthenticationEnum = typeof UpdateBotBodyAuthenticationEnum[keyof typeof UpdateBotBodyAuthenticationEnum];\n\n/**\n * Event Definition\n * @export\n * @interface UpdateBotBodyEventsValue\n */\nexport interface UpdateBotBodyEventsValue {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyEventsValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyIntegrationsValue\n */\nexport interface UpdateBotBodyIntegrationsValue {\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateBotBodyIntegrationsValue\n     */\n    'enabled': boolean;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyIntegrationsValue\n     */\n    'configuration': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyRecurringEventsValue\n */\nexport interface UpdateBotBodyRecurringEventsValue {\n    /**\n     * \n     * @type {CreateBotBodyRecurringEventsValueSchedule}\n     * @memberof UpdateBotBodyRecurringEventsValue\n     */\n    'schedule': CreateBotBodyRecurringEventsValueSchedule;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateBotBodyRecurringEventsValue\n     */\n    'type': string;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyRecurringEventsValue\n     */\n    'payload': { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface UpdateBotBodyStatesValue\n */\nexport interface UpdateBotBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `bot`)\n     * @type {string}\n     * @memberof UpdateBotBodyStatesValue\n     */\n    'type': UpdateBotBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateBotBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n    /**\n     * Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn\\'t expire.\n     * @type {number}\n     * @memberof UpdateBotBodyStatesValue\n     */\n    'expiry'?: number;\n}\n\nexport const UpdateBotBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot'\n} as const;\n\nexport type UpdateBotBodyStatesValueTypeEnum = typeof UpdateBotBodyStatesValueTypeEnum[keyof typeof UpdateBotBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface UpdateBotBodyUser\n */\nexport interface UpdateBotBodyUser {\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyUserTagsValue; }}\n     * @memberof UpdateBotBodyUser\n     */\n    'tags'?: { [key: string]: UpdateBotBodyUserTagsValue; };\n}\n/**\n * Definition of a tag that can be provided on the object\n * @export\n * @interface UpdateBotBodyUserTagsValue\n */\nexport interface UpdateBotBodyUserTagsValue {\n    /**\n     * Title of the tag\n     * @type {string}\n     * @memberof UpdateBotBodyUserTagsValue\n     */\n    'title'?: string;\n    /**\n     * Description of the tag\n     * @type {string}\n     * @memberof UpdateBotBodyUserTagsValue\n     */\n    'description'?: string;\n}\n/**\n * \n * @export\n * @interface UpdateBotResponse\n */\nexport interface UpdateBotResponse {\n    /**\n     * \n     * @type {Bot}\n     * @memberof UpdateBotResponse\n     */\n    'bot': Bot;\n}\n/**\n * \n * @export\n * @interface UpdateConversationBody\n */\nexport interface UpdateConversationBody {\n    /**\n     * Tags for the [Conversation](#schema_conversation)\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateConversationBody\n     */\n    'tags': { [key: string]: string; };\n    /**\n     * Ids of the [User]s(#schema_user) participating in the conversation\n     * @type {Array<string>}\n     * @memberof UpdateConversationBody\n     */\n    'participantIds': Array<string>;\n}\n/**\n * \n * @export\n * @interface UpdateConversationResponse\n */\nexport interface UpdateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof UpdateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBody\n */\nexport interface UpdateIntegrationBody {\n    /**\n     * \n     * @type {CreateIntegrationBodyConfiguration}\n     * @memberof UpdateIntegrationBody\n     */\n    'configuration'?: CreateIntegrationBodyConfiguration;\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValue; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'channels'?: { [key: string]: UpdateIntegrationBodyChannelsValue; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyActionsValue; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'actions'?: { [key: string]: UpdateIntegrationBodyActionsValue; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyEventsValue; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'events'?: { [key: string]: UpdateBotBodyEventsValue; };\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyStatesValue; }}\n     * @memberof UpdateIntegrationBody\n     */\n    'states'?: { [key: string]: UpdateIntegrationBodyStatesValue; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyUser}\n     * @memberof UpdateIntegrationBody\n     */\n    'user'?: UpdateIntegrationBodyUser;\n    /**\n     * JavaScript code of the integration\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'code'?: string;\n    /**\n     * Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes.\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'icon'?: string;\n    /**\n     * Base64 encoded markdown of the integration readme. The readme is specific to each integration versions.\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'readme'?: string;\n    /**\n     * Title of the integration. This is the name that will be displayed in the UI\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'title'?: string;\n    /**\n     * Description of the integration. This is the description that will be displayed in the UI\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'description'?: string;\n    /**\n     * URL of the integration; Only available for dev integrations\n     * @type {string}\n     * @memberof UpdateIntegrationBody\n     */\n    'url'?: string;\n}\n/**\n * Action definition\n * @export\n * @interface UpdateIntegrationBodyActionsValue\n */\nexport interface UpdateIntegrationBodyActionsValue {\n    /**\n     * \n     * @type {CreateIntegrationBodyActionsValueInput}\n     * @memberof UpdateIntegrationBodyActionsValue\n     */\n    'input': CreateIntegrationBodyActionsValueInput;\n    /**\n     * \n     * @type {CreateIntegrationBodyActionsValueInput}\n     * @memberof UpdateIntegrationBodyActionsValue\n     */\n    'output': CreateIntegrationBodyActionsValueInput;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyChannelsValue\n */\nexport interface UpdateIntegrationBodyChannelsValue {\n    /**\n     * \n     * @type {{ [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue; }}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'messages'?: { [key: string]: UpdateIntegrationBodyChannelsValueMessagesValue; };\n    /**\n     * \n     * @type {UpdateIntegrationBodyChannelsValueConversation}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'conversation'?: UpdateIntegrationBodyChannelsValueConversation;\n    /**\n     * \n     * @type {UpdateBotBodyUser}\n     * @memberof UpdateIntegrationBodyChannelsValue\n     */\n    'message'?: UpdateBotBodyUser;\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyChannelsValueConversation\n */\nexport interface UpdateIntegrationBodyChannelsValueConversation {\n    /**\n     * \n     * @type {CreateIntegrationBodyChannelsValueConversationCreation}\n     * @memberof UpdateIntegrationBodyChannelsValueConversation\n     */\n    'creation'?: CreateIntegrationBodyChannelsValueConversationCreation;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyUserTagsValue; }}\n     * @memberof UpdateIntegrationBodyChannelsValueConversation\n     */\n    'tags'?: { [key: string]: UpdateBotBodyUserTagsValue; };\n}\n/**\n * Message definition\n * @export\n * @interface UpdateIntegrationBodyChannelsValueMessagesValue\n */\nexport interface UpdateIntegrationBodyChannelsValueMessagesValue {\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateIntegrationBodyChannelsValueMessagesValue\n     */\n    'schema': { [key: string]: any; };\n}\n/**\n * State definition\n * @export\n * @interface UpdateIntegrationBodyStatesValue\n */\nexport interface UpdateIntegrationBodyStatesValue {\n    /**\n     * Type of the [State](#schema_state) (`conversation`, `user` or `integration`)\n     * @type {string}\n     * @memberof UpdateIntegrationBodyStatesValue\n     */\n    'type': UpdateIntegrationBodyStatesValueTypeEnum;\n    /**\n     * Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data.\n     * @type {{ [key: string]: any; }}\n     * @memberof UpdateIntegrationBodyStatesValue\n     */\n    'schema': { [key: string]: any; };\n}\n\nexport const UpdateIntegrationBodyStatesValueTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Integration: 'integration'\n} as const;\n\nexport type UpdateIntegrationBodyStatesValueTypeEnum = typeof UpdateIntegrationBodyStatesValueTypeEnum[keyof typeof UpdateIntegrationBodyStatesValueTypeEnum];\n\n/**\n * \n * @export\n * @interface UpdateIntegrationBodyUser\n */\nexport interface UpdateIntegrationBodyUser {\n    /**\n     * \n     * @type {CreateIntegrationBodyUserCreation}\n     * @memberof UpdateIntegrationBodyUser\n     */\n    'creation'?: CreateIntegrationBodyUserCreation;\n    /**\n     * \n     * @type {{ [key: string]: UpdateBotBodyUserTagsValue; }}\n     * @memberof UpdateIntegrationBodyUser\n     */\n    'tags'?: { [key: string]: UpdateBotBodyUserTagsValue; };\n}\n/**\n * \n * @export\n * @interface UpdateIntegrationResponse\n */\nexport interface UpdateIntegrationResponse {\n    /**\n     * \n     * @type {Integration}\n     * @memberof UpdateIntegrationResponse\n     */\n    'integration': Integration;\n}\n/**\n * \n * @export\n * @interface UpdateMessageBody\n */\nexport interface UpdateMessageBody {\n    /**\n     * Set of [Tags](#tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](#tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateMessageBody\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface UpdateMessageResponse\n */\nexport interface UpdateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof UpdateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface UpdateUserBody\n */\nexport interface UpdateUserBody {\n    /**\n     * Tags for the [User](#schema_user)\n     * @type {{ [key: string]: string; }}\n     * @memberof UpdateUserBody\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface UpdateUserResponse\n */\nexport interface UpdateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof UpdateUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface UpdateWorkspaceBody\n */\nexport interface UpdateWorkspaceBody {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceBody\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceBody\n     */\n    'accountType'?: UpdateWorkspaceBodyAccountTypeEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceBody\n     */\n    'spendingLimit'?: number;\n}\n\nexport const UpdateWorkspaceBodyAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type UpdateWorkspaceBodyAccountTypeEnum = typeof UpdateWorkspaceBodyAccountTypeEnum[keyof typeof UpdateWorkspaceBodyAccountTypeEnum];\n\n/**\n * \n * @export\n * @interface UpdateWorkspaceMemberBody\n */\nexport interface UpdateWorkspaceMemberBody {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberBody\n     */\n    'role'?: UpdateWorkspaceMemberBodyRoleEnum;\n}\n\nexport const UpdateWorkspaceMemberBodyRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type UpdateWorkspaceMemberBodyRoleEnum = typeof UpdateWorkspaceMemberBodyRoleEnum[keyof typeof UpdateWorkspaceMemberBodyRoleEnum];\n\n/**\n * \n * @export\n * @interface UpdateWorkspaceMemberResponse\n */\nexport interface UpdateWorkspaceMemberResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'userId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceMemberResponse\n     */\n    'role': UpdateWorkspaceMemberResponseRoleEnum;\n}\n\nexport const UpdateWorkspaceMemberResponseRoleEnum = {\n    Viewer: 'viewer',\n    Billing: 'billing',\n    Developer: 'developer',\n    Manager: 'manager',\n    Administrator: 'administrator',\n    Owner: 'owner'\n} as const;\n\nexport type UpdateWorkspaceMemberResponseRoleEnum = typeof UpdateWorkspaceMemberResponseRoleEnum[keyof typeof UpdateWorkspaceMemberResponseRoleEnum];\n\n/**\n * \n * @export\n * @interface UpdateWorkspaceResponse\n */\nexport interface UpdateWorkspaceResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'accountType': UpdateWorkspaceResponseAccountTypeEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UpdateWorkspaceResponse\n     */\n    'spendingLimit': number;\n}\n\nexport const UpdateWorkspaceResponseAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type UpdateWorkspaceResponseAccountTypeEnum = typeof UpdateWorkspaceResponseAccountTypeEnum[keyof typeof UpdateWorkspaceResponseAccountTypeEnum];\n\n/**\n * The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.\n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * Id of the [User](#schema_user)\n     * @type {string}\n     * @memberof User\n     */\n    'id': string;\n    /**\n     * Creation date of the [User](#schema_user) in the ISO 8601 format\n     * @type {string}\n     * @memberof User\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [User](#schema_user) in the ISO 8601 format\n     * @type {string}\n     * @memberof User\n     */\n    'updatedAt': string;\n    /**\n     * Set of [Tags](#tags) that you can attach to a [User](#schema_user). The set of [Tags](#tags) available on a [User](#schema_user) is restricted by the list of [Tags](#tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them.\n     * @type {{ [key: string]: string; }}\n     * @memberof User\n     */\n    'tags': { [key: string]: string; };\n}\n/**\n * \n * @export\n * @interface Workspace\n */\nexport interface Workspace {\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'ownerId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'createdAt': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'updatedAt': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Workspace\n     */\n    'botCount': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Workspace\n     */\n    'accountType': WorkspaceAccountTypeEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Workspace\n     */\n    'blocked': boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Workspace\n     */\n    'spendingLimit': number;\n}\n\nexport const WorkspaceAccountTypeEnum = {\n    Free: 'free',\n    Premium: 'premium'\n} as const;\n\nexport type WorkspaceAccountTypeEnum = typeof WorkspaceAccountTypeEnum[keyof typeof WorkspaceAccountTypeEnum];\n\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Call an action\n         * @param {CallActionBody} [callActionBody] Action payload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        callAction: async (callActionBody?: CallActionBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/actions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(callActionBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * An integration can call this endpoint to configure itself\n         * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        configureIntegration: async (configureIntegrationBody?: ConfigureIntegrationBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/integrations/configure`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(configureIntegrationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create bot\n         * @param {CreateBotBody} [createBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createBot: async (createBotBody?: CreateBotBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/bots`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createBotBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateConversationBody} [createConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConversation: async (createConversationBody?: CreateConversationBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/conversations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateEventBody} [createEventBody] Event data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEvent: async (createEventBody?: CreateEventBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/events`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createEventBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create File\n         * @param {CreateFileBody} [createFileBody] Create File\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile: async (createFileBody?: CreateFileBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/storage/files`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createFileBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create integration\n         * @param {CreateIntegrationBody} [createIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIntegration: async (createIntegrationBody?: CreateIntegrationBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/integrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createIntegrationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateMessageBody} [createMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMessage: async (createMessageBody?: CreateMessageBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/messages`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateUserBody} [createUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser: async (createUserBody?: CreateUserBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/users`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Add a member to the workspace\n         * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspaceMember: async (createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspace-members`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createWorkspaceMemberBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete bot\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBot: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConversation: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteConversation', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteFile', 'id', id)\n            const localVarPath = `/v1/storage/files/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete integration\n         * @param {string} id Integration Id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteIntegration: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteIntegration', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {string} id Message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMessage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteMessage', 'id', id)\n            const localVarPath = `/v1/chat/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteUser', 'id', id)\n            const localVarPath = `/v1/chat/users/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove a member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspaceMember: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteWorkspaceMember', 'id', id)\n            const localVarPath = `/v1/admin/workspace-members/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Download File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('downloadFile', 'id', id)\n            const localVarPath = `/v1/storage/files/{id}/download`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get bot details\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBot: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get bot analytics\n         * @param {string} id Bot ID\n         * @param {string} startDate Start date/time (inclusive)\n         * @param {string} endDate End date/time (exclusive)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotAnalytics: async (id: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBotAnalytics', 'id', id)\n            // verify required parameter 'startDate' is not null or undefined\n            assertParamExists('getBotAnalytics', 'startDate', startDate)\n            // verify required parameter 'endDate' is not null or undefined\n            assertParamExists('getBotAnalytics', 'endDate', endDate)\n            const localVarPath = `/v1/admin/bots/{id}/analytics`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (startDate !== undefined) {\n                localVarQueryParameter['startDate'] = startDate;\n            }\n\n            if (endDate !== undefined) {\n                localVarQueryParameter['endDate'] = endDate;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get bot logs\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotLogs: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBotLogs', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}/logs`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the webchat code/URL for a bot\n         * @param {string} id Bot ID\n         * @param {GetBotWebchatTypeEnum} type type of script to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotWebchat: async (id: string, type: GetBotWebchatTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getBotWebchat', 'id', id)\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getBotWebchat', 'type', type)\n            const localVarPath = `/v1/admin/bots/{id}/webchat`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConversation: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getConversation', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Event](#schema_event) object for a valid identifiers.\n         * @param {string} id Event id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEvent: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getEvent', 'id', id)\n            const localVarPath = `/v1/chat/events/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFile: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getFile', 'id', id)\n            const localVarPath = `/v1/storage/files/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get integration\n         * @param {string} id Integration Id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegration: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getIntegration', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get integration\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationByName: async (name: string, version: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getIntegrationByName', 'name', name)\n            // verify required parameter 'version' is not null or undefined\n            assertParamExists('getIntegrationByName', 'version', version)\n            const localVarPath = `/v1/admin/integrations/{name}/{version}`\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)))\n                .replace(`{${\"version\"}}`, encodeURIComponent(String(version)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get integration logs\n         * @param {string} id Integration Id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationLogs: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getIntegrationLogs', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}/logs`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {string} id Id of the Message\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMessage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMessage', 'id', id)\n            const localVarPath = `/v1/chat/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n         * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateConversation: async (getOrCreateConversationBody?: GetOrCreateConversationBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/conversations/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n         * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateMessage: async (getOrCreateMessageBody?: GetOrCreateMessageBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/messages/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n         * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateUser: async (getOrCreateUserBody?: GetOrCreateUserBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/users/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get public integration by name and version\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegration: async (name: string, version: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getPublicIntegration', 'name', name)\n            // verify required parameter 'version' is not null or undefined\n            assertParamExists('getPublicIntegration', 'version', version)\n            const localVarPath = `/v1/admin/hub/integrations/{name}/{version}`\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)))\n                .replace(`{${\"version\"}}`, encodeURIComponent(String(version)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get public integration by Id\n         * @param {string} id Integration Id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegrationById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getPublicIntegrationById', 'id', id)\n            const localVarPath = `/v1/admin/hub/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers.\n         * @param {GetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getState: async (type: GetStateTypeEnum, id: string, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('getState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('getState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getUser', 'id', id)\n            const localVarPath = `/v1/chat/users/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get workspace details\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspace: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getWorkspace', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Introspect the API\n         * @param {IntrospectBody} [introspectBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        introspect: async (introspectBody?: IntrospectBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/introspect`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(introspectBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List bots\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBots: async (nextToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/bots`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {Array<string>} [participantIds] Filter by participant ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversations: async (nextToken?: string, tags?: { [key: string]: string; }, participantIds?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/conversations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (tags !== undefined) {\n                for (const [key, value] of Object.entries(tags)) {\n                    localVarQueryParameter[key] = value;\n                }\n            }\n\n            if (participantIds) {\n                localVarQueryParameter['participantIds'] = participantIds;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retreives a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [type] Filter by event type\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listEvents: async (nextToken?: string, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/events`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Files\n         * @param {string} botId Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles: async (botId: string, nextToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'botId' is not null or undefined\n            assertParamExists('listFiles', 'botId', botId)\n            const localVarPath = `/v1/storage/files`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (botId !== undefined) {\n                localVarQueryParameter['botId'] = botId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List integrations\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listIntegrations: async (nextToken?: string, name?: string, version?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/integrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (version !== undefined) {\n                localVarQueryParameter['version'] = version;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Conversation id\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listMessages: async (nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/messages`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (conversationId !== undefined) {\n                localVarQueryParameter['conversationId'] = conversationId;\n            }\n\n            if (tags !== undefined) {\n                for (const [key, value] of Object.entries(tags)) {\n                    localVarQueryParameter[key] = value;\n                }\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List public integration\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPublicIntegrations: async (nextToken?: string, name?: string, version?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/hub/integrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (name !== undefined) {\n                localVarQueryParameter['name'] = name;\n            }\n\n            if (version !== undefined) {\n                localVarQueryParameter['version'] = version;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsers: async (nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/chat/users`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (conversationId !== undefined) {\n                localVarQueryParameter['conversationId'] = conversationId;\n            }\n\n            if (tags !== undefined) {\n                for (const [key, value] of Object.entries(tags)) {\n                    localVarQueryParameter[key] = value;\n                }\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Lists all the members in a workspace\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceMembers: async (nextToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspace-members`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List workspaces the user has access to\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaces: async (nextToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/admin/workspaces`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {PatchStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {PatchStateBody} [patchStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchState: async (type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('patchState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('patchState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('patchState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(patchStateBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {SetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {SetStateBody} [setStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setState: async (type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            assertParamExists('setState', 'type', type)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('setState', 'id', id)\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('setState', 'name', name)\n            const localVarPath = `/v1/chat/states/{type}/{id}/{name}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(setStateBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n         * @param {string} id Bot ID\n         * @param {TransferBotBody} [transferBotBody] Bot transfer request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferBot: async (id: string, transferBotBody?: TransferBotBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('transferBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}/transfer`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(transferBotBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update bot\n         * @param {string} id Bot ID\n         * @param {UpdateBotBody} [updateBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBot: async (id: string, updateBotBody?: UpdateBotBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateBot', 'id', id)\n            const localVarPath = `/v1/admin/bots/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateBotBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id Conversation id\n         * @param {UpdateConversationBody} [updateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateConversation: async (id: string, updateConversationBody?: UpdateConversationBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateConversation', 'id', id)\n            const localVarPath = `/v1/chat/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update integration\n         * @param {string} id Integration Id\n         * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIntegration: async (id: string, updateIntegrationBody?: UpdateIntegrationBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateIntegration', 'id', id)\n            const localVarPath = `/v1/admin/integrations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateIntegrationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a message\n         * @param {string} id Message id\n         * @param {UpdateMessageBody} [updateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMessage: async (id: string, updateMessageBody?: UpdateMessageBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateMessage', 'id', id)\n            const localVarPath = `/v1/chat/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id User ID\n         * @param {UpdateUserBody} [updateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser: async (id: string, updateUserBody?: UpdateUserBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateUser', 'id', id)\n            const localVarPath = `/v1/chat/users/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update workspace\n         * @param {string} id Workspace ID\n         * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspace: async (id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateWorkspace', 'id', id)\n            const localVarPath = `/v1/admin/workspaces/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update the member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspaceMember: async (id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateWorkspaceMember', 'id', id)\n            const localVarPath = `/v1/admin/workspace-members/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceMemberBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Call an action\n         * @param {CallActionBody} [callActionBody] Action payload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async callAction(callActionBody?: CallActionBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallActionResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.callAction(callActionBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.callAction']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * An integration can call this endpoint to configure itself\n         * @param {ConfigureIntegrationBody} [configureIntegrationBody] Configuration of the integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async configureIntegration(configureIntegrationBody?: ConfigureIntegrationBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.configureIntegration(configureIntegrationBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configureIntegration']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create bot\n         * @param {CreateBotBody} [createBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createBot(createBotBody?: CreateBotBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createBot(createBotBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBot']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateConversationBody} [createConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createConversation(createConversationBody?: CreateConversationBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversation(createConversationBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createConversation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateEventBody} [createEventBody] Event data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createEvent(createEventBody?: CreateEventBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(createEventBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createEvent']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create File\n         * @param {CreateFileBody} [createFileBody] Create File\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createFile(createFileBody?: CreateFileBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFileResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createFile(createFileBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createFile']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create integration\n         * @param {CreateIntegrationBody} [createIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createIntegration(createIntegrationBody?: CreateIntegrationBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntegration(createIntegrationBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createIntegration']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateMessageBody} [createMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createMessage(createMessageBody?: CreateMessageBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessage(createMessageBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMessage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n         * @param {CreateUserBody} [createUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createUser(createUserBody?: CreateUserBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createUser']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Add a member to the workspace\n         * @param {CreateWorkspaceMemberBody} [createWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createWorkspaceMember(createWorkspaceMemberBody?: CreateWorkspaceMemberBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceMemberResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkspaceMember(createWorkspaceMemberBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createWorkspaceMember']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete bot\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteBot(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBot(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteBot']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteConversation(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConversation(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteConversation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteFile(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteFile']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete integration\n         * @param {string} id Integration Id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteIntegration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntegration(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteIntegration']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {string} id Message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteMessage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessage(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMessage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteUser']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Remove a member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWorkspaceMember(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspaceMember(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteWorkspaceMember']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Download File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async downloadFile(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.downloadFile']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get bot details\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBot(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBot(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBot']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get bot analytics\n         * @param {string} id Bot ID\n         * @param {string} startDate Start date/time (inclusive)\n         * @param {string} endDate End date/time (exclusive)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBotAnalytics(id: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotAnalyticsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBotAnalytics(id, startDate, endDate, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBotAnalytics']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get bot logs\n         * @param {string} id Bot ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBotLogs(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotLogsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBotLogs(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBotLogs']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get the webchat code/URL for a bot\n         * @param {string} id Bot ID\n         * @param {GetBotWebchatTypeEnum} type type of script to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBotWebchat(id: string, type: GetBotWebchatTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBotWebchatResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBotWebchat(id, type, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBotWebchat']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getConversation(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversation(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getConversation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves the [Event](#schema_event) object for a valid identifiers.\n         * @param {string} id Event id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEvent(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getEvent']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get File\n         * @param {string} id File ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFile(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getFile']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get integration\n         * @param {string} id Integration Id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getIntegration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegration(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getIntegration']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get integration\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getIntegrationByName(name: string, version: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationByNameResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationByName(name, version, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getIntegrationByName']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get integration logs\n         * @param {string} id Integration Id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getIntegrationLogs(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIntegrationLogsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationLogs(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getIntegrationLogs']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {string} id Id of the Message\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMessage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessage(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMessage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n         * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateConversation(getOrCreateConversationBody?: GetOrCreateConversationBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateConversation(getOrCreateConversationBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getOrCreateConversation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n         * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateMessage(getOrCreateMessageBody?: GetOrCreateMessageBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateMessage(getOrCreateMessageBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getOrCreateMessage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n         * @param {GetOrCreateUserBody} [getOrCreateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateUser(getOrCreateUserBody?: GetOrCreateUserBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateUser(getOrCreateUserBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getOrCreateUser']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get public integration by name and version\n         * @param {string} name Integration Name\n         * @param {string} version Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPublicIntegration(name: string, version: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicIntegration(name, version, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPublicIntegration']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get public integration by Id\n         * @param {string} id Integration Id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPublicIntegrationById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPublicIntegrationByIdResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicIntegrationById(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPublicIntegrationById']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers.\n         * @param {GetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getState(type: GetStateTypeEnum, id: string, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getState(type, id, name, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getState']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {string} id User ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUser']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Get workspace details\n         * @param {string} id Workspace ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWorkspace(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWorkspaceResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspace(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkspace']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Introspect the API\n         * @param {IntrospectBody} [introspectBody] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async introspect(introspectBody?: IntrospectBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntrospectResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.introspect(introspectBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.introspect']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List bots\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listBots(nextToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBotsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listBots(nextToken, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listBots']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {Array<string>} [participantIds] Filter by participant ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listConversations(nextToken?: string, tags?: { [key: string]: string; }, participantIds?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConversationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listConversations(nextToken, tags, participantIds, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listConversations']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retreives a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [type] Filter by event type\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listEvents(nextToken?: string, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEventsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(nextToken, type, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listEvents']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List Files\n         * @param {string} botId Bot ID\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listFiles(botId: string, nextToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFilesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(botId, nextToken, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listFiles']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List integrations\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listIntegrations(nextToken?: string, name?: string, version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIntegrationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listIntegrations(nextToken, name, version, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listIntegrations']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Conversation id\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listMessages(nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMessagesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listMessages(nextToken, conversationId, tags, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listMessages']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List public integration\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [name] Integration Name\n         * @param {string} [version] Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listPublicIntegrations(nextToken?: string, name?: string, version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPublicIntegrationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listPublicIntegrations(nextToken, name, version, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listPublicIntegrations']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {string} [conversationId] Filter by conversation id. This will return all users that have participated in the conversation.\n         * @param {{ [key: string]: string; }} [tags] Filter by tags\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listUsers(nextToken?: string, conversationId?: string, tags?: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(nextToken, conversationId, tags, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listUsers']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Lists all the members in a workspace\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaceMembers(nextToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspaceMembersResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceMembers(nextToken, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listWorkspaceMembers']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List workspaces the user has access to\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listWorkspaces(nextToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkspacesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaces(nextToken, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listWorkspaces']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {PatchStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {PatchStateBody} [patchStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async patchState(type: PatchStateTypeEnum, id: string, name: string, patchStateBody?: PatchStateBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatchStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.patchState(type, id, name, patchStateBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchState']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {SetStateTypeEnum} type State type\n         * @param {string} id State id\n         * @param {string} name State name\n         * @param {SetStateBody} [setStateBody] State content\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async setState(type: SetStateTypeEnum, id: string, name: string, setStateBody?: SetStateBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetStateResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.setState(type, id, name, setStateBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setState']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n         * @param {string} id Bot ID\n         * @param {TransferBotBody} [transferBotBody] Bot transfer request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async transferBot(id: string, transferBotBody?: TransferBotBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.transferBot(id, transferBotBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.transferBot']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update bot\n         * @param {string} id Bot ID\n         * @param {UpdateBotBody} [updateBotBody] Bot metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateBot(id: string, updateBotBody?: UpdateBotBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBotResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBot(id, updateBotBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateBot']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id Conversation id\n         * @param {UpdateConversationBody} [updateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateConversation(id: string, updateConversationBody?: UpdateConversationBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConversation(id, updateConversationBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateConversation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update integration\n         * @param {string} id Integration Id\n         * @param {UpdateIntegrationBody} [updateIntegrationBody] Integration\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateIntegration(id: string, updateIntegrationBody?: UpdateIntegrationBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateIntegrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIntegration(id, updateIntegrationBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateIntegration']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update a message\n         * @param {string} id Message id\n         * @param {UpdateMessageBody} [updateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateMessage(id: string, updateMessageBody?: UpdateMessageBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(id, updateMessageBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMessage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {string} id User ID\n         * @param {UpdateUserBody} [updateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUser(id: string, updateUserBody?: UpdateUserBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, updateUserBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateUser']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update workspace\n         * @param {string} id Workspace ID\n         * @param {UpdateWorkspaceBody} [updateWorkspaceBody] Workspace metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorkspace(id: string, updateWorkspaceBody?: UpdateWorkspaceBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspace(id, updateWorkspaceBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateWorkspace']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update the member of a workspace\n         * @param {string} id Workspace member ID\n         * @param {UpdateWorkspaceMemberBody} [updateWorkspaceMemberBody] Workspace member metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWorkspaceMember(id: string, updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateWorkspaceMemberResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspaceMember(id, updateWorkspaceMemberBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateWorkspaceMember']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * Call an action\n         * @param {DefaultApiCallActionRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        callAction(requestParameters: DefaultApiCallActionRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CallActionResponse> {\n            return localVarFp.callAction(requestParameters.callActionBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * An integration can call this endpoint to configure itself\n         * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        configureIntegration(requestParameters: DefaultApiConfigureIntegrationRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.configureIntegration(requestParameters.configureIntegrationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create bot\n         * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createBot(requestParameters: DefaultApiCreateBotRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CreateBotResponse> {\n            return localVarFp.createBot(requestParameters.createBotBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConversation(requestParameters: DefaultApiCreateConversationRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CreateConversationResponse> {\n            return localVarFp.createConversation(requestParameters.createConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEvent(requestParameters: DefaultApiCreateEventRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CreateEventResponse> {\n            return localVarFp.createEvent(requestParameters.createEventBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create File\n         * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile(requestParameters: DefaultApiCreateFileRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CreateFileResponse> {\n            return localVarFp.createFile(requestParameters.createFileBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create integration\n         * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createIntegration(requestParameters: DefaultApiCreateIntegrationRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CreateIntegrationResponse> {\n            return localVarFp.createIntegration(requestParameters.createIntegrationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMessage(requestParameters: DefaultApiCreateMessageRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CreateMessageResponse> {\n            return localVarFp.createMessage(requestParameters.createMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n         * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(requestParameters: DefaultApiCreateUserRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CreateUserResponse> {\n            return localVarFp.createUser(requestParameters.createUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Add a member to the workspace\n         * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createWorkspaceMember(requestParameters: DefaultApiCreateWorkspaceMemberRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CreateWorkspaceMemberResponse> {\n            return localVarFp.createWorkspaceMember(requestParameters.createWorkspaceMemberBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete bot\n         * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteBot(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteConversation(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete File\n         * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteFile(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete integration\n         * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteIntegration(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteMessage(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteUser(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Remove a member of a workspace\n         * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteWorkspaceMember(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Download File\n         * @param {DefaultApiDownloadFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile(requestParameters: DefaultApiDownloadFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {\n            return localVarFp.downloadFile(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get bot details\n         * @param {DefaultApiGetBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBot(requestParameters: DefaultApiGetBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetBotResponse> {\n            return localVarFp.getBot(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get bot analytics\n         * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetBotAnalyticsResponse> {\n            return localVarFp.getBotAnalytics(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get bot logs\n         * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetBotLogsResponse> {\n            return localVarFp.getBotLogs(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get the webchat code/URL for a bot\n         * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetBotWebchatResponse> {\n            return localVarFp.getBotWebchat(requestParameters.id, requestParameters.type, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConversation(requestParameters: DefaultApiGetConversationRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetConversationResponse> {\n            return localVarFp.getConversation(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Event](#schema_event) object for a valid identifiers.\n         * @param {DefaultApiGetEventRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEvent(requestParameters: DefaultApiGetEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetEventResponse> {\n            return localVarFp.getEvent(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get File\n         * @param {DefaultApiGetFileRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFile(requestParameters: DefaultApiGetFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetFileResponse> {\n            return localVarFp.getFile(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get integration\n         * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetIntegrationResponse> {\n            return localVarFp.getIntegration(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get integration\n         * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetIntegrationByNameResponse> {\n            return localVarFp.getIntegrationByName(requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get integration logs\n         * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetIntegrationLogsResponse> {\n            return localVarFp.getIntegrationLogs(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMessage(requestParameters: DefaultApiGetMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetMessageResponse> {\n            return localVarFp.getMessage(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n         * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetOrCreateConversationResponse> {\n            return localVarFp.getOrCreateConversation(requestParameters.getOrCreateConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n         * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetOrCreateMessageResponse> {\n            return localVarFp.getOrCreateMessage(requestParameters.getOrCreateMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n         * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateUser(requestParameters: DefaultApiGetOrCreateUserRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetOrCreateUserResponse> {\n            return localVarFp.getOrCreateUser(requestParameters.getOrCreateUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get public integration by name and version\n         * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetPublicIntegrationResponse> {\n            return localVarFp.getPublicIntegration(requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get public integration by Id\n         * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetPublicIntegrationByIdResponse> {\n            return localVarFp.getPublicIntegrationById(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [State](#schema_state) object for a valid identifiers.\n         * @param {DefaultApiGetStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getState(requestParameters: DefaultApiGetStateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetStateResponse> {\n            return localVarFp.getState(requestParameters.type, requestParameters.id, requestParameters.name, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {DefaultApiGetUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(requestParameters: DefaultApiGetUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetUserResponse> {\n            return localVarFp.getUser(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Get workspace details\n         * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetWorkspaceResponse> {\n            return localVarFp.getWorkspace(requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Introspect the API\n         * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        introspect(requestParameters: DefaultApiIntrospectRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<IntrospectResponse> {\n            return localVarFp.introspect(requestParameters.introspectBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List bots\n         * @param {DefaultApiListBotsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listBots(requestParameters: DefaultApiListBotsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListBotsResponse> {\n            return localVarFp.listBots(requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversations(requestParameters: DefaultApiListConversationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListConversationsResponse> {\n            return localVarFp.listConversations(requestParameters.nextToken, requestParameters.tags, requestParameters.participantIds, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retreives a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n         * @param {DefaultApiListEventsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listEvents(requestParameters: DefaultApiListEventsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListEventsResponse> {\n            return localVarFp.listEvents(requestParameters.nextToken, requestParameters.type, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Files\n         * @param {DefaultApiListFilesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles(requestParameters: DefaultApiListFilesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListFilesResponse> {\n            return localVarFp.listFiles(requestParameters.botId, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List integrations\n         * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listIntegrations(requestParameters: DefaultApiListIntegrationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListIntegrationsResponse> {\n            return localVarFp.listIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listMessages(requestParameters: DefaultApiListMessagesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListMessagesResponse> {\n            return localVarFp.listMessages(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List public integration\n         * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPublicIntegrations(requestParameters: DefaultApiListPublicIntegrationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListPublicIntegrationsResponse> {\n            return localVarFp.listPublicIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n         * @param {DefaultApiListUsersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listUsers(requestParameters: DefaultApiListUsersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListUsersResponse> {\n            return localVarFp.listUsers(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Lists all the members in a workspace\n         * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaceMembers(requestParameters: DefaultApiListWorkspaceMembersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListWorkspaceMembersResponse> {\n            return localVarFp.listWorkspaceMembers(requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List workspaces the user has access to\n         * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listWorkspaces(requestParameters: DefaultApiListWorkspacesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListWorkspacesResponse> {\n            return localVarFp.listWorkspaces(requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchState(requestParameters: DefaultApiPatchStateRequest, options?: RawAxiosRequestConfig): AxiosPromise<PatchStateResponse> {\n            return localVarFp.patchState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.patchStateBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n         * @param {DefaultApiSetStateRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setState(requestParameters: DefaultApiSetStateRequest, options?: RawAxiosRequestConfig): AxiosPromise<SetStateResponse> {\n            return localVarFp.setState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.setStateBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n         * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        transferBot(requestParameters: DefaultApiTransferBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.transferBot(requestParameters.id, requestParameters.transferBotBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update bot\n         * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateBotResponse> {\n            return localVarFp.updateBot(requestParameters.id, requestParameters.updateBotBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateConversationResponse> {\n            return localVarFp.updateConversation(requestParameters.id, requestParameters.updateConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update integration\n         * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateIntegrationResponse> {\n            return localVarFp.updateIntegration(requestParameters.id, requestParameters.updateIntegrationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a message\n         * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateMessageResponse> {\n            return localVarFp.updateMessage(requestParameters.id, requestParameters.updateMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n         * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateUserResponse> {\n            return localVarFp.updateUser(requestParameters.id, requestParameters.updateUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update workspace\n         * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateWorkspaceResponse> {\n            return localVarFp.updateWorkspace(requestParameters.id, requestParameters.updateWorkspaceBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update the member of a workspace\n         * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateWorkspaceMemberResponse> {\n            return localVarFp.updateWorkspaceMember(requestParameters.id, requestParameters.updateWorkspaceMemberBody, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * Request parameters for callAction operation in DefaultApi.\n * @export\n * @interface DefaultApiCallActionRequest\n */\nexport interface DefaultApiCallActionRequest {\n    /**\n     * Action payload\n     * @type {CallActionBody}\n     * @memberof DefaultApiCallAction\n     */\n    readonly callActionBody?: CallActionBody\n}\n\n/**\n * Request parameters for configureIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiConfigureIntegrationRequest\n */\nexport interface DefaultApiConfigureIntegrationRequest {\n    /**\n     * Configuration of the integration\n     * @type {ConfigureIntegrationBody}\n     * @memberof DefaultApiConfigureIntegration\n     */\n    readonly configureIntegrationBody?: ConfigureIntegrationBody\n}\n\n/**\n * Request parameters for createBot operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateBotRequest\n */\nexport interface DefaultApiCreateBotRequest {\n    /**\n     * Bot metadata\n     * @type {CreateBotBody}\n     * @memberof DefaultApiCreateBot\n     */\n    readonly createBotBody?: CreateBotBody\n}\n\n/**\n * Request parameters for createConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateConversationRequest\n */\nexport interface DefaultApiCreateConversationRequest {\n    /**\n     * Conversation data\n     * @type {CreateConversationBody}\n     * @memberof DefaultApiCreateConversation\n     */\n    readonly createConversationBody?: CreateConversationBody\n}\n\n/**\n * Request parameters for createEvent operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateEventRequest\n */\nexport interface DefaultApiCreateEventRequest {\n    /**\n     * Event data\n     * @type {CreateEventBody}\n     * @memberof DefaultApiCreateEvent\n     */\n    readonly createEventBody?: CreateEventBody\n}\n\n/**\n * Request parameters for createFile operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateFileRequest\n */\nexport interface DefaultApiCreateFileRequest {\n    /**\n     * Create File\n     * @type {CreateFileBody}\n     * @memberof DefaultApiCreateFile\n     */\n    readonly createFileBody?: CreateFileBody\n}\n\n/**\n * Request parameters for createIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateIntegrationRequest\n */\nexport interface DefaultApiCreateIntegrationRequest {\n    /**\n     * Integration\n     * @type {CreateIntegrationBody}\n     * @memberof DefaultApiCreateIntegration\n     */\n    readonly createIntegrationBody?: CreateIntegrationBody\n}\n\n/**\n * Request parameters for createMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateMessageRequest\n */\nexport interface DefaultApiCreateMessageRequest {\n    /**\n     * Message data\n     * @type {CreateMessageBody}\n     * @memberof DefaultApiCreateMessage\n     */\n    readonly createMessageBody?: CreateMessageBody\n}\n\n/**\n * Request parameters for createUser operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateUserRequest\n */\nexport interface DefaultApiCreateUserRequest {\n    /**\n     * User data\n     * @type {CreateUserBody}\n     * @memberof DefaultApiCreateUser\n     */\n    readonly createUserBody?: CreateUserBody\n}\n\n/**\n * Request parameters for createWorkspaceMember operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateWorkspaceMemberRequest\n */\nexport interface DefaultApiCreateWorkspaceMemberRequest {\n    /**\n     * Workspace member metadata\n     * @type {CreateWorkspaceMemberBody}\n     * @memberof DefaultApiCreateWorkspaceMember\n     */\n    readonly createWorkspaceMemberBody?: CreateWorkspaceMemberBody\n}\n\n/**\n * Request parameters for deleteBot operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteBotRequest\n */\nexport interface DefaultApiDeleteBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiDeleteBot\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteConversationRequest\n */\nexport interface DefaultApiDeleteConversationRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiDeleteConversation\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteFile operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteFileRequest\n */\nexport interface DefaultApiDeleteFileRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiDeleteFile\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteIntegrationRequest\n */\nexport interface DefaultApiDeleteIntegrationRequest {\n    /**\n     * Integration Id\n     * @type {string}\n     * @memberof DefaultApiDeleteIntegration\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteMessageRequest\n */\nexport interface DefaultApiDeleteMessageRequest {\n    /**\n     * Message id\n     * @type {string}\n     * @memberof DefaultApiDeleteMessage\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteUser operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteUserRequest\n */\nexport interface DefaultApiDeleteUserRequest {\n    /**\n     * User ID\n     * @type {string}\n     * @memberof DefaultApiDeleteUser\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteWorkspaceMember operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteWorkspaceMemberRequest\n */\nexport interface DefaultApiDeleteWorkspaceMemberRequest {\n    /**\n     * Workspace member ID\n     * @type {string}\n     * @memberof DefaultApiDeleteWorkspaceMember\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for downloadFile operation in DefaultApi.\n * @export\n * @interface DefaultApiDownloadFileRequest\n */\nexport interface DefaultApiDownloadFileRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiDownloadFile\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getBot operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotRequest\n */\nexport interface DefaultApiGetBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBot\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getBotAnalytics operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotAnalyticsRequest\n */\nexport interface DefaultApiGetBotAnalyticsRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBotAnalytics\n     */\n    readonly id: string\n\n    /**\n     * Start date/time (inclusive)\n     * @type {string}\n     * @memberof DefaultApiGetBotAnalytics\n     */\n    readonly startDate: string\n\n    /**\n     * End date/time (exclusive)\n     * @type {string}\n     * @memberof DefaultApiGetBotAnalytics\n     */\n    readonly endDate: string\n}\n\n/**\n * Request parameters for getBotLogs operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotLogsRequest\n */\nexport interface DefaultApiGetBotLogsRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBotLogs\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getBotWebchat operation in DefaultApi.\n * @export\n * @interface DefaultApiGetBotWebchatRequest\n */\nexport interface DefaultApiGetBotWebchatRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiGetBotWebchat\n     */\n    readonly id: string\n\n    /**\n     * type of script to get\n     * @type {'preconfigured' | 'configurable' | 'fullscreen' | 'sharableUrl'}\n     * @memberof DefaultApiGetBotWebchat\n     */\n    readonly type: GetBotWebchatTypeEnum\n}\n\n/**\n * Request parameters for getConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiGetConversationRequest\n */\nexport interface DefaultApiGetConversationRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiGetConversation\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getEvent operation in DefaultApi.\n * @export\n * @interface DefaultApiGetEventRequest\n */\nexport interface DefaultApiGetEventRequest {\n    /**\n     * Event id\n     * @type {string}\n     * @memberof DefaultApiGetEvent\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getFile operation in DefaultApi.\n * @export\n * @interface DefaultApiGetFileRequest\n */\nexport interface DefaultApiGetFileRequest {\n    /**\n     * File ID\n     * @type {string}\n     * @memberof DefaultApiGetFile\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiGetIntegrationRequest\n */\nexport interface DefaultApiGetIntegrationRequest {\n    /**\n     * Integration Id\n     * @type {string}\n     * @memberof DefaultApiGetIntegration\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getIntegrationByName operation in DefaultApi.\n * @export\n * @interface DefaultApiGetIntegrationByNameRequest\n */\nexport interface DefaultApiGetIntegrationByNameRequest {\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationByName\n     */\n    readonly name: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationByName\n     */\n    readonly version: string\n}\n\n/**\n * Request parameters for getIntegrationLogs operation in DefaultApi.\n * @export\n * @interface DefaultApiGetIntegrationLogsRequest\n */\nexport interface DefaultApiGetIntegrationLogsRequest {\n    /**\n     * Integration Id\n     * @type {string}\n     * @memberof DefaultApiGetIntegrationLogs\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetMessageRequest\n */\nexport interface DefaultApiGetMessageRequest {\n    /**\n     * Id of the Message\n     * @type {string}\n     * @memberof DefaultApiGetMessage\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getOrCreateConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateConversationRequest\n */\nexport interface DefaultApiGetOrCreateConversationRequest {\n    /**\n     * Conversation data\n     * @type {GetOrCreateConversationBody}\n     * @memberof DefaultApiGetOrCreateConversation\n     */\n    readonly getOrCreateConversationBody?: GetOrCreateConversationBody\n}\n\n/**\n * Request parameters for getOrCreateMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateMessageRequest\n */\nexport interface DefaultApiGetOrCreateMessageRequest {\n    /**\n     * Message data\n     * @type {GetOrCreateMessageBody}\n     * @memberof DefaultApiGetOrCreateMessage\n     */\n    readonly getOrCreateMessageBody?: GetOrCreateMessageBody\n}\n\n/**\n * Request parameters for getOrCreateUser operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateUserRequest\n */\nexport interface DefaultApiGetOrCreateUserRequest {\n    /**\n     * User data\n     * @type {GetOrCreateUserBody}\n     * @memberof DefaultApiGetOrCreateUser\n     */\n    readonly getOrCreateUserBody?: GetOrCreateUserBody\n}\n\n/**\n * Request parameters for getPublicIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiGetPublicIntegrationRequest\n */\nexport interface DefaultApiGetPublicIntegrationRequest {\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiGetPublicIntegration\n     */\n    readonly name: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiGetPublicIntegration\n     */\n    readonly version: string\n}\n\n/**\n * Request parameters for getPublicIntegrationById operation in DefaultApi.\n * @export\n * @interface DefaultApiGetPublicIntegrationByIdRequest\n */\nexport interface DefaultApiGetPublicIntegrationByIdRequest {\n    /**\n     * Integration Id\n     * @type {string}\n     * @memberof DefaultApiGetPublicIntegrationById\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getState operation in DefaultApi.\n * @export\n * @interface DefaultApiGetStateRequest\n */\nexport interface DefaultApiGetStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration'}\n     * @memberof DefaultApiGetState\n     */\n    readonly type: GetStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiGetState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiGetState\n     */\n    readonly name: string\n}\n\n/**\n * Request parameters for getUser operation in DefaultApi.\n * @export\n * @interface DefaultApiGetUserRequest\n */\nexport interface DefaultApiGetUserRequest {\n    /**\n     * User ID\n     * @type {string}\n     * @memberof DefaultApiGetUser\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiGetWorkspaceRequest\n */\nexport interface DefaultApiGetWorkspaceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiGetWorkspace\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for introspect operation in DefaultApi.\n * @export\n * @interface DefaultApiIntrospectRequest\n */\nexport interface DefaultApiIntrospectRequest {\n    /**\n     * \n     * @type {IntrospectBody}\n     * @memberof DefaultApiIntrospect\n     */\n    readonly introspectBody?: IntrospectBody\n}\n\n/**\n * Request parameters for listBots operation in DefaultApi.\n * @export\n * @interface DefaultApiListBotsRequest\n */\nexport interface DefaultApiListBotsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListBots\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listConversations operation in DefaultApi.\n * @export\n * @interface DefaultApiListConversationsRequest\n */\nexport interface DefaultApiListConversationsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListConversations\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListConversations\n     */\n    readonly tags?: { [key: string]: string; }\n\n    /**\n     * Filter by participant ids\n     * @type {Array<string>}\n     * @memberof DefaultApiListConversations\n     */\n    readonly participantIds?: Array<string>\n}\n\n/**\n * Request parameters for listEvents operation in DefaultApi.\n * @export\n * @interface DefaultApiListEventsRequest\n */\nexport interface DefaultApiListEventsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by event type\n     * @type {string}\n     * @memberof DefaultApiListEvents\n     */\n    readonly type?: string\n}\n\n/**\n * Request parameters for listFiles operation in DefaultApi.\n * @export\n * @interface DefaultApiListFilesRequest\n */\nexport interface DefaultApiListFilesRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiListFiles\n     */\n    readonly botId: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListFiles\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listIntegrations operation in DefaultApi.\n * @export\n * @interface DefaultApiListIntegrationsRequest\n */\nexport interface DefaultApiListIntegrationsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly nextToken?: string\n\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly name?: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiListIntegrations\n     */\n    readonly version?: string\n}\n\n/**\n * Request parameters for listMessages operation in DefaultApi.\n * @export\n * @interface DefaultApiListMessagesRequest\n */\nexport interface DefaultApiListMessagesRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListMessages\n     */\n    readonly nextToken?: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiListMessages\n     */\n    readonly conversationId?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListMessages\n     */\n    readonly tags?: { [key: string]: string; }\n}\n\n/**\n * Request parameters for listPublicIntegrations operation in DefaultApi.\n * @export\n * @interface DefaultApiListPublicIntegrationsRequest\n */\nexport interface DefaultApiListPublicIntegrationsRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListPublicIntegrations\n     */\n    readonly nextToken?: string\n\n    /**\n     * Integration Name\n     * @type {string}\n     * @memberof DefaultApiListPublicIntegrations\n     */\n    readonly name?: string\n\n    /**\n     * Integration version. Either a semver version or tag \\&quot;latest\\&quot;\n     * @type {string}\n     * @memberof DefaultApiListPublicIntegrations\n     */\n    readonly version?: string\n}\n\n/**\n * Request parameters for listUsers operation in DefaultApi.\n * @export\n * @interface DefaultApiListUsersRequest\n */\nexport interface DefaultApiListUsersRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListUsers\n     */\n    readonly nextToken?: string\n\n    /**\n     * Filter by conversation id. This will return all users that have participated in the conversation.\n     * @type {string}\n     * @memberof DefaultApiListUsers\n     */\n    readonly conversationId?: string\n\n    /**\n     * Filter by tags\n     * @type {{ [key: string]: string; }}\n     * @memberof DefaultApiListUsers\n     */\n    readonly tags?: { [key: string]: string; }\n}\n\n/**\n * Request parameters for listWorkspaceMembers operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspaceMembersRequest\n */\nexport interface DefaultApiListWorkspaceMembersRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListWorkspaceMembers\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listWorkspaces operation in DefaultApi.\n * @export\n * @interface DefaultApiListWorkspacesRequest\n */\nexport interface DefaultApiListWorkspacesRequest {\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListWorkspaces\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for patchState operation in DefaultApi.\n * @export\n * @interface DefaultApiPatchStateRequest\n */\nexport interface DefaultApiPatchStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration'}\n     * @memberof DefaultApiPatchState\n     */\n    readonly type: PatchStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiPatchState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiPatchState\n     */\n    readonly name: string\n\n    /**\n     * State content\n     * @type {PatchStateBody}\n     * @memberof DefaultApiPatchState\n     */\n    readonly patchStateBody?: PatchStateBody\n}\n\n/**\n * Request parameters for setState operation in DefaultApi.\n * @export\n * @interface DefaultApiSetStateRequest\n */\nexport interface DefaultApiSetStateRequest {\n    /**\n     * State type\n     * @type {'conversation' | 'user' | 'bot' | 'integration'}\n     * @memberof DefaultApiSetState\n     */\n    readonly type: SetStateTypeEnum\n\n    /**\n     * State id\n     * @type {string}\n     * @memberof DefaultApiSetState\n     */\n    readonly id: string\n\n    /**\n     * State name\n     * @type {string}\n     * @memberof DefaultApiSetState\n     */\n    readonly name: string\n\n    /**\n     * State content\n     * @type {SetStateBody}\n     * @memberof DefaultApiSetState\n     */\n    readonly setStateBody?: SetStateBody\n}\n\n/**\n * Request parameters for transferBot operation in DefaultApi.\n * @export\n * @interface DefaultApiTransferBotRequest\n */\nexport interface DefaultApiTransferBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiTransferBot\n     */\n    readonly id: string\n\n    /**\n     * Bot transfer request\n     * @type {TransferBotBody}\n     * @memberof DefaultApiTransferBot\n     */\n    readonly transferBotBody?: TransferBotBody\n}\n\n/**\n * Request parameters for updateBot operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateBotRequest\n */\nexport interface DefaultApiUpdateBotRequest {\n    /**\n     * Bot ID\n     * @type {string}\n     * @memberof DefaultApiUpdateBot\n     */\n    readonly id: string\n\n    /**\n     * Bot metadata\n     * @type {UpdateBotBody}\n     * @memberof DefaultApiUpdateBot\n     */\n    readonly updateBotBody?: UpdateBotBody\n}\n\n/**\n * Request parameters for updateConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateConversationRequest\n */\nexport interface DefaultApiUpdateConversationRequest {\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiUpdateConversation\n     */\n    readonly id: string\n\n    /**\n     * Conversation data\n     * @type {UpdateConversationBody}\n     * @memberof DefaultApiUpdateConversation\n     */\n    readonly updateConversationBody?: UpdateConversationBody\n}\n\n/**\n * Request parameters for updateIntegration operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateIntegrationRequest\n */\nexport interface DefaultApiUpdateIntegrationRequest {\n    /**\n     * Integration Id\n     * @type {string}\n     * @memberof DefaultApiUpdateIntegration\n     */\n    readonly id: string\n\n    /**\n     * Integration\n     * @type {UpdateIntegrationBody}\n     * @memberof DefaultApiUpdateIntegration\n     */\n    readonly updateIntegrationBody?: UpdateIntegrationBody\n}\n\n/**\n * Request parameters for updateMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateMessageRequest\n */\nexport interface DefaultApiUpdateMessageRequest {\n    /**\n     * Message id\n     * @type {string}\n     * @memberof DefaultApiUpdateMessage\n     */\n    readonly id: string\n\n    /**\n     * Message data\n     * @type {UpdateMessageBody}\n     * @memberof DefaultApiUpdateMessage\n     */\n    readonly updateMessageBody?: UpdateMessageBody\n}\n\n/**\n * Request parameters for updateUser operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateUserRequest\n */\nexport interface DefaultApiUpdateUserRequest {\n    /**\n     * User ID\n     * @type {string}\n     * @memberof DefaultApiUpdateUser\n     */\n    readonly id: string\n\n    /**\n     * User data\n     * @type {UpdateUserBody}\n     * @memberof DefaultApiUpdateUser\n     */\n    readonly updateUserBody?: UpdateUserBody\n}\n\n/**\n * Request parameters for updateWorkspace operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateWorkspaceRequest\n */\nexport interface DefaultApiUpdateWorkspaceRequest {\n    /**\n     * Workspace ID\n     * @type {string}\n     * @memberof DefaultApiUpdateWorkspace\n     */\n    readonly id: string\n\n    /**\n     * Workspace metadata\n     * @type {UpdateWorkspaceBody}\n     * @memberof DefaultApiUpdateWorkspace\n     */\n    readonly updateWorkspaceBody?: UpdateWorkspaceBody\n}\n\n/**\n * Request parameters for updateWorkspaceMember operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateWorkspaceMemberRequest\n */\nexport interface DefaultApiUpdateWorkspaceMemberRequest {\n    /**\n     * Workspace member ID\n     * @type {string}\n     * @memberof DefaultApiUpdateWorkspaceMember\n     */\n    readonly id: string\n\n    /**\n     * Workspace member metadata\n     * @type {UpdateWorkspaceMemberBody}\n     * @memberof DefaultApiUpdateWorkspaceMember\n     */\n    readonly updateWorkspaceMemberBody?: UpdateWorkspaceMemberBody\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Call an action\n     * @param {DefaultApiCallActionRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public callAction(requestParameters: DefaultApiCallActionRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).callAction(requestParameters.callActionBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * An integration can call this endpoint to configure itself\n     * @param {DefaultApiConfigureIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public configureIntegration(requestParameters: DefaultApiConfigureIntegrationRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).configureIntegration(requestParameters.configureIntegrationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create bot\n     * @param {DefaultApiCreateBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createBot(requestParameters: DefaultApiCreateBotRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createBot(requestParameters.createBotBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Conversation](#schema_conversation). When creating a new [Conversation](#schema_conversation), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createConversation(requestParameters: DefaultApiCreateConversationRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createConversation(requestParameters.createConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Event](#schema_event). When creating a new [Event](#schema_event), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateEventRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createEvent(requestParameters: DefaultApiCreateEventRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createEvent(requestParameters.createEventBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create File\n     * @param {DefaultApiCreateFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createFile(requestParameters: DefaultApiCreateFileRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createFile(requestParameters.createFileBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create integration\n     * @param {DefaultApiCreateIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createIntegration(requestParameters: DefaultApiCreateIntegrationRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createIntegration(requestParameters.createIntegrationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Message](#schema_message). When creating a new [Message](#schema_message), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createMessage(requestParameters: DefaultApiCreateMessageRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createMessage(requestParameters.createMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [User](#schema_user). When creating a new [User](#schema_user), the required tags must be provided. See the specific integration for more details.\n     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createUser(requestParameters: DefaultApiCreateUserRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createUser(requestParameters.createUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Add a member to the workspace\n     * @param {DefaultApiCreateWorkspaceMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createWorkspaceMember(requestParameters: DefaultApiCreateWorkspaceMemberRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createWorkspaceMember(requestParameters.createWorkspaceMemberBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete bot\n     * @param {DefaultApiDeleteBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteBot(requestParameters: DefaultApiDeleteBotRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteBot(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteConversation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete File\n     * @param {DefaultApiDeleteFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteFile(requestParameters: DefaultApiDeleteFileRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteFile(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete integration\n     * @param {DefaultApiDeleteIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteIntegration(requestParameters: DefaultApiDeleteIntegrationRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteIntegration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [Message](#schema_message). It cannot be undone.\n     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteMessage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [User](#schema_user). It cannot be undone.\n     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Remove a member of a workspace\n     * @param {DefaultApiDeleteWorkspaceMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteWorkspaceMember(requestParameters: DefaultApiDeleteWorkspaceMemberRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteWorkspaceMember(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Download File\n     * @param {DefaultApiDownloadFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public downloadFile(requestParameters: DefaultApiDownloadFileRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).downloadFile(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get bot details\n     * @param {DefaultApiGetBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBot(requestParameters: DefaultApiGetBotRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBot(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get bot analytics\n     * @param {DefaultApiGetBotAnalyticsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBotAnalytics(requestParameters: DefaultApiGetBotAnalyticsRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBotAnalytics(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get bot logs\n     * @param {DefaultApiGetBotLogsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBotLogs(requestParameters: DefaultApiGetBotLogsRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBotLogs(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get the webchat code/URL for a bot\n     * @param {DefaultApiGetBotWebchatRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBotWebchat(requestParameters: DefaultApiGetBotWebchatRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBotWebchat(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getConversation(requestParameters: DefaultApiGetConversationRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getConversation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Event](#schema_event) object for a valid identifiers.\n     * @param {DefaultApiGetEventRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getEvent(requestParameters: DefaultApiGetEventRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getEvent(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get File\n     * @param {DefaultApiGetFileRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getFile(requestParameters: DefaultApiGetFileRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getFile(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get integration\n     * @param {DefaultApiGetIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getIntegration(requestParameters: DefaultApiGetIntegrationRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getIntegration(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get integration\n     * @param {DefaultApiGetIntegrationByNameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getIntegrationByName(requestParameters: DefaultApiGetIntegrationByNameRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getIntegrationByName(requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get integration logs\n     * @param {DefaultApiGetIntegrationLogsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getIntegrationLogs(requestParameters: DefaultApiGetIntegrationLogsRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getIntegrationLogs(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Message](#schema_message) object for a valid identifier.\n     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMessage(requestParameters: DefaultApiGetMessageRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getMessage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier. If the conversation does not exist, it will be created.\n     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateConversation(requestParameters.getOrCreateConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Message](#schema_message) object for a valid identifier. If the message does not exist, it will be created.\n     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateMessage(requestParameters.getOrCreateMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [User](#schema_user) object for a valid identifier. If the user does not exist, it will be created.\n     * @param {DefaultApiGetOrCreateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateUser(requestParameters: DefaultApiGetOrCreateUserRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateUser(requestParameters.getOrCreateUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get public integration by name and version\n     * @param {DefaultApiGetPublicIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPublicIntegration(requestParameters: DefaultApiGetPublicIntegrationRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getPublicIntegration(requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get public integration by Id\n     * @param {DefaultApiGetPublicIntegrationByIdRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPublicIntegrationById(requestParameters: DefaultApiGetPublicIntegrationByIdRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getPublicIntegrationById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [State](#schema_state) object for a valid identifiers.\n     * @param {DefaultApiGetStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getState(requestParameters: DefaultApiGetStateRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getState(requestParameters.type, requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [User](#schema_user) object for a valid identifier.\n     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getUser(requestParameters: DefaultApiGetUserRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Get workspace details\n     * @param {DefaultApiGetWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWorkspace(requestParameters: DefaultApiGetWorkspaceRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWorkspace(requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Introspect the API\n     * @param {DefaultApiIntrospectRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public introspect(requestParameters: DefaultApiIntrospectRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).introspect(requestParameters.introspectBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List bots\n     * @param {DefaultApiListBotsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listBots(requestParameters: DefaultApiListBotsRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listBots(requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Conversation](#schema_conversation) you\u2019ve previously created. The conversations are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listConversations(requestParameters: DefaultApiListConversationsRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listConversations(requestParameters.nextToken, requestParameters.tags, requestParameters.participantIds, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retreives a list of [Event](#schema_event) you\u2019ve previously created. The events are returned in sorted order, with the most recent appearing first.\n     * @param {DefaultApiListEventsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listEvents(requestParameters: DefaultApiListEventsRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listEvents(requestParameters.nextToken, requestParameters.type, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Files\n     * @param {DefaultApiListFilesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listFiles(requestParameters: DefaultApiListFilesRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listFiles(requestParameters.botId, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List integrations\n     * @param {DefaultApiListIntegrationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listIntegrations(requestParameters: DefaultApiListIntegrationsRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Messages](#schema_message) you\u2019ve previously created. The messages are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListMessagesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listMessages(requestParameters: DefaultApiListMessagesRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listMessages(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List public integration\n     * @param {DefaultApiListPublicIntegrationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listPublicIntegrations(requestParameters: DefaultApiListPublicIntegrationsRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listPublicIntegrations(requestParameters.nextToken, requestParameters.name, requestParameters.version, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [User](#schema_user) previously created. The users are returned in sorted order, with the most recent appearing first. The list can be filtered using [Tags](#tags).\n     * @param {DefaultApiListUsersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listUsers(requestParameters: DefaultApiListUsersRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listUsers(requestParameters.nextToken, requestParameters.conversationId, requestParameters.tags, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Lists all the members in a workspace\n     * @param {DefaultApiListWorkspaceMembersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaceMembers(requestParameters: DefaultApiListWorkspaceMembersRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaceMembers(requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List workspaces the user has access to\n     * @param {DefaultApiListWorkspacesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listWorkspaces(requestParameters: DefaultApiListWorkspacesRequest = {}, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listWorkspaces(requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Updates the [State](#schema_state) object by setting the values of the parameters passed.\n     * @param {DefaultApiPatchStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public patchState(requestParameters: DefaultApiPatchStateRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).patchState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.patchStateBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Overrides the [State](#schema_state) object by setting the values of the parameters passed.\n     * @param {DefaultApiSetStateRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public setState(requestParameters: DefaultApiSetStateRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).setState(requestParameters.type, requestParameters.id, requestParameters.name, requestParameters.setStateBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.\n     * @param {DefaultApiTransferBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public transferBot(requestParameters: DefaultApiTransferBotRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).transferBot(requestParameters.id, requestParameters.transferBotBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update bot\n     * @param {DefaultApiUpdateBotRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateBot(requestParameters: DefaultApiUpdateBotRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateBot(requestParameters.id, requestParameters.updateBotBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a [Conversation](#schema_conversation) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateConversation(requestParameters.id, requestParameters.updateConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update integration\n     * @param {DefaultApiUpdateIntegrationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateIntegration(requestParameters: DefaultApiUpdateIntegrationRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateIntegration(requestParameters.id, requestParameters.updateIntegrationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a message\n     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateMessage(requestParameters.id, requestParameters.updateMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a [User](#schema_user) object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateUser(requestParameters.id, requestParameters.updateUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update workspace\n     * @param {DefaultApiUpdateWorkspaceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateWorkspace(requestParameters: DefaultApiUpdateWorkspaceRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateWorkspace(requestParameters.id, requestParameters.updateWorkspaceBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update the member of a workspace\n     * @param {DefaultApiUpdateWorkspaceMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateWorkspaceMember(requestParameters: DefaultApiUpdateWorkspaceMemberRequest, options?: RawAxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateWorkspaceMember(requestParameters.id, requestParameters.updateWorkspaceMemberBody, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n/**\n * @export\n */\nexport const GetBotWebchatTypeEnum = {\n    Preconfigured: 'preconfigured',\n    Configurable: 'configurable',\n    Fullscreen: 'fullscreen',\n    SharableUrl: 'sharableUrl'\n} as const;\nexport type GetBotWebchatTypeEnum = typeof GetBotWebchatTypeEnum[keyof typeof GetBotWebchatTypeEnum];\n/**\n * @export\n */\nexport const GetStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration'\n} as const;\nexport type GetStateTypeEnum = typeof GetStateTypeEnum[keyof typeof GetStateTypeEnum];\n/**\n * @export\n */\nexport const PatchStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration'\n} as const;\nexport type PatchStateTypeEnum = typeof PatchStateTypeEnum[keyof typeof PatchStateTypeEnum];\n/**\n * @export\n */\nexport const SetStateTypeEnum = {\n    Conversation: 'conversation',\n    User: 'user',\n    Bot: 'bot',\n    Integration: 'integration'\n} as const;\nexport type SetStateTypeEnum = typeof SetStateTypeEnum[keyof typeof SetStateTypeEnum];\n\n\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Botpress API\n * API for Botpress Cloud\n *\n * The version of the OpenAPI document: 0.3.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://api.botpress.cloud\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: RawAxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath ?? basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n\ninterface ServerMap {\n    [key: string]: {\n        url: string,\n        description: string,\n    }[];\n}\n\n/**\n *\n * @export\n */\nexport const operationServerMap: ServerMap = {\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Botpress API\n * API for Botpress Cloud\n *\n * The version of the OpenAPI document: 0.3.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n"],
  "mappings": "skBAAA,IAAAA,GAAA,GAAAC,GAAAD,GAAA,YAAAE,EAAA,mBAAAC,EAAA,kBAAAC,EAAA,2BAAAC,EAAA,2BAAAC,EAAA,2BAAAC,EAAA,wBAAAC,EAAA,sBAAAC,EAAA,wBAAAC,EAAA,yBAAAC,EAAA,2BAAAC,EAAA,0BAAAC,EAAA,0BAAAC,EAAA,iBAAAC,EAAA,sBAAAC,EAAA,iBAAAC,EAAA,8BAAAC,EAAA,UAAAC,GAAA,cAAAC,EAAA,eAAAC,KAAA,eAAAC,GAAAtB,IAAA,IAAAuB,GAAkB,oBAClBJ,GAAuB,oBCDvB,IAAAK,EAAkC,2BAE5BC,EAAgB,kCAEhBC,GAAgB,aAChBC,GAAe,YACfC,GAAuB,oBACvBC,GAAqB,kBACrBC,GAAe,WAkBd,SAASC,GAAgBC,EAAwC,CACtE,IAAMC,EAAQC,GAASF,CAAW,EAE5BG,EAAkC,CAAC,EAEzC,OAAIF,EAAM,cACRE,EAAQ,gBAAgB,EAAIF,EAAM,aAGhCA,EAAM,QACRE,EAAQ,UAAU,EAAIF,EAAM,OAG1BA,EAAM,gBACRE,EAAQ,kBAAkB,EAAIF,EAAM,eAGlCA,EAAM,QACRE,EAAQ,cAAmB,UAAUF,EAAM,SAGtC,CACL,KAAMA,EAAM,MAAQR,EACpB,gBAAiB,YACjB,QAAAU,CACF,CACF,CAEA,SAASD,GAASD,EAAoB,CACpC,OAAI,YACsBA,EAGtB,SACKG,GAAcH,CAAK,EAGrBA,CACT,CAEA,SAASG,GAAcH,EAAiC,CACtD,IAAMI,EAAsB,CAC1B,GAAGJ,EACH,KAAMA,EAAM,MAAQ,QAAQ,IAAIP,EAAa,GAAKD,EAClD,MAAOQ,EAAM,OAAS,QAAQ,IAAIN,EAAY,EAC9C,cAAeM,EAAM,eAAiB,QAAQ,IAAIL,EAAoB,EACtE,YAAaK,EAAM,aAAe,QAAQ,IAAIJ,EAAkB,CAClE,EAEMS,EAAQD,EAAO,OAAS,QAAQ,IAAIP,EAAY,EAEtD,OAAIQ,IACFD,EAAO,MAAQC,GAGVD,CACT,CCzDA,IAAeE,EAAf,cAA6G,KAAM,CAGjH,YACkBC,EACAC,EACAC,EACSC,EACTC,EAChB,CACA,MAAMD,CAAO,EANG,UAAAH,EACA,iBAAAC,EACA,UAAAC,EACS,aAAAC,EACT,WAAAC,CAGlB,CAVgB,WAAa,GAY7B,QAAS,CACP,MAAO,CACL,KAAM,KAAK,KACX,KAAM,KAAK,KACX,QAAS,KAAK,OAChB,CACF,CACF,EAEMC,GAAYC,GAAgC,OAAOA,GAAQ,UAAY,CAAC,MAAM,QAAQA,CAAG,GAAKA,IAAQ,KAE/FC,GAAcC,GAClBA,aAAkBT,GAAgBM,GAASG,CAAM,GAAMA,EAAoB,aAAe,GAQtFC,EAAN,cAA2BV,CAA4D,CAC5F,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,4BAA6B,UAAWD,EAASC,CAAK,CACnE,CACF,EAOaM,EAAN,cAA4BX,CAA8D,CAC/F,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,6BAA8B,WAAYD,EAASC,CAAK,CACrE,CACF,EAOaO,EAAN,cAAgCZ,CAAiF,CACtH,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,4CAA6C,eAAgBD,EAASC,CAAK,CACxF,CACF,EAOaQ,EAAN,cAA6Bb,CAA4F,CAC9H,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,yDAA2D,YAAaD,EAASC,CAAK,CACnG,CACF,EAOaS,EAAN,cAAmCd,CAA4E,CACpH,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,oCAAqC,kBAAmBD,EAASC,CAAK,CACnF,CACF,EAOaU,EAAN,cAAkCf,CAAyE,CAChH,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,kCAAmC,iBAAkBD,EAASC,CAAK,CAChF,CACF,EAOaW,EAAN,cAAwChB,CAAiH,CAC9J,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,oEAAqE,uBAAwBD,EAASC,CAAK,CACxH,CACF,EAOaY,EAAN,cAAkCjB,CAA8E,CACrH,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,uCAAwC,iBAAkBD,EAASC,CAAK,CACrF,CACF,EAOaa,EAAN,cAAoClB,CAAkF,CAC3H,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,yCAA0C,mBAAoBD,EAASC,CAAK,CACzF,CACF,EAOac,EAAN,cAAqCnB,CAAiF,CAC3H,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,uCAAwC,oBAAqBD,EAASC,CAAK,CACxF,CACF,EAOae,EAAN,cAAqCpB,CAAyG,CACnJ,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,8DAAgE,oBAAqBD,EAASC,CAAK,CAChH,CACF,EAOagB,EAAN,cAAqCrB,CAA+M,CACzP,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,qKAAsK,oBAAqBD,EAASC,CAAK,CACtN,CACF,EAOaiB,EAAN,cAAoCtB,CAAgL,CACzN,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,sIAAwI,mBAAoBD,EAASC,CAAK,CACvL,CACF,EAOakB,EAAN,cAAqCvB,CAA6K,CACvN,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,mIAAoI,oBAAqBD,EAASC,CAAK,CACpL,CACF,EAOamB,EAAN,cAAgCxB,CAA0J,CAC/L,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,qHAAsH,eAAgBD,EAASC,CAAK,CACjK,CACF,EAOaoB,EAAN,cAA2BzB,CAA4G,CAC5I,YAAYI,EAAiBC,EAAe,CAC1C,MAAM,IAAK,4EAA6E,UAAWD,EAASC,CAAK,CACnH,CACF,EAsCMqB,GAAmF,CACvF,QAAShB,EACT,SAAUC,EACV,aAAcC,EACd,UAAWC,EACX,gBAAiBC,EACjB,eAAgBC,EAChB,qBAAsBC,EACtB,eAAgBC,EAChB,iBAAkBC,EAClB,kBAAmBC,EACnB,kBAAmBC,EACnB,kBAAmBC,EACnB,iBAAkBC,EAClB,kBAAmBC,EACnB,aAAcC,EACd,QAASC,CACX,EAEaE,EAAaC,GACpBpB,GAAWoB,CAAG,EACTA,EAGLA,aAAe,MACV,IAAIlB,EAAakB,EAAI,QAASA,CAAG,EAGtCA,IAAQ,KACH,IAAIlB,EAAa,2BAA2B,EAGjD,OAAOkB,GAAQ,SACV,IAAIlB,EAAakB,CAAG,EAGzB,OAAOA,GAAQ,SACV,IAAIlB,EAAa,2BAA2B,EAG9CmB,GAAmBD,CAAG,EAG/B,SAASC,GAAmBD,EAAa,CACvC,GAAI,SAAUA,GAAO,SAAUA,GAAO,YAAaA,EAAK,CACtD,GAAI,OAAOA,EAAI,SAAY,SACzB,OAAO,IAAIlB,EAAa,2BAA2B,EAGrD,GAAI,OAAOkB,EAAI,MAAS,SACtB,OAAO,IAAIlB,EAAakB,EAAI,OAAO,EAGrC,IAAME,EAAaJ,GAAWE,EAAI,IAAI,EAEtC,OAAKE,EAIE,IAAIA,EAAWF,EAAI,OAAO,EAHxB,IAAIlB,EAAakB,EAAI,OAAO,CAIvC,CAEA,OAAO,IAAIlB,EAAa,2BAA2B,CACrD,CCpUA,IAAAqB,GAAqC,oBCgBrC,IAAAC,EAAwB,oBCExB,IAAAC,GAAwB,oBAEXC,EAAY,6BAA6B,QAAQ,OAAQ,EAAE,EA4BjE,IAAMC,EAAN,KAAc,CAGjB,YAAYC,EAAyCC,EAAmBC,EAAqBC,EAAuB,GAAAC,QAAa,CAA5E,cAAAH,EAAwC,WAAAE,EACrFH,IACA,KAAK,cAAgBA,EACrB,KAAK,SAAWA,EAAc,UAAYC,EAElD,CAPU,aAQd,EAQaI,EAAN,cAA4B,KAAM,CACrC,YAAmBC,EAAeC,EAAc,CAC5C,MAAMA,CAAG,EADM,WAAAD,EAEf,KAAK,KAAO,eAChB,CACJ,EAaaE,EAAgC,CAC7C,EC5DO,IAAMC,EAAiB,sBAOjBC,EAAoB,SAAUC,EAAsBC,EAAmBC,EAAqB,CACrG,GAAIA,GAAe,KACf,MAAM,IAAIC,EAAcF,EAAW,sBAAsBA,wCAAgDD,IAAe,CAEhI,EAmDA,SAASI,EAAwBC,EAAkCC,EAAgBC,EAAc,GAAU,CACnGD,GAAa,OACb,OAAOA,GAAc,SACjB,MAAM,QAAQA,CAAS,EACtBA,EAAoB,QAAQE,GAAQJ,EAAwBC,EAAiBG,EAAMD,CAAG,CAAC,EAGxF,OAAO,KAAKD,CAAS,EAAE,QAAQG,GAC3BL,EAAwBC,EAAiBC,EAAUG,CAAU,EAAG,GAAGF,IAAMA,IAAQ,GAAK,IAAM,KAAKE,GAAY,CACjH,EAIAJ,EAAgB,IAAIE,CAAG,EACvBF,EAAgB,OAAOE,EAAKD,CAAS,EAGrCD,EAAgB,IAAIE,EAAKD,CAAS,EAG9C,CAMO,IAAMI,EAAkB,SAAUC,KAAaC,EAAgB,CAClE,IAAMC,EAAe,IAAI,gBAAgBF,EAAI,MAAM,EACnDP,EAAwBS,EAAcD,CAAO,EAC7CD,EAAI,OAASE,EAAa,SAAS,CACvC,EAMaC,EAAwB,SAAUC,EAAYC,EAAqBC,EAA+B,CAC3G,IAAMC,EAAY,OAAOH,GAAU,SAInC,OAH2BG,GAAaD,GAAiBA,EAAc,WACjEA,EAAc,WAAWD,EAAe,QAAQ,cAAc,CAAC,EAC/DE,GAEA,KAAK,UAAUH,IAAU,OAAYA,EAAQ,CAAC,CAAC,EAC9CA,GAAS,EACpB,EAMaI,EAAe,SAAUR,EAAU,CAC5C,OAAOA,EAAI,SAAWA,EAAI,OAASA,EAAI,IAC3C,EAMaS,EAAwB,SAAUC,EAAwBC,EAA4BC,EAAmBN,EAA+B,CACjJ,MAAO,CAAoCO,EAAuBF,EAAaG,EAAmBF,IAAc,CAC5G,IAAMG,EAAmB,CAAC,GAAGL,EAAU,QAAS,KAAMG,EAAM,SAAS,QAAU,GAAKP,GAAe,UAAYQ,GAAYJ,EAAU,GAAG,EACxI,OAAOG,EAAM,QAAcE,CAAgB,CAC/C,CACJ,EFqqGO,IAAMC,GAA8B,SAAUC,EAA+B,CAChF,MAAO,CAOH,WAAY,MAAOC,EAAiCC,EAAiC,CAAC,IAA4B,CAC9G,IAAMC,EAAe,mBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBX,EAAgBM,EAAwBP,CAAa,EAElG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,qBAAsB,MAAOO,EAAqDZ,EAAiC,CAAC,IAA4B,CAC5I,IAAMC,EAAe,kCAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBE,EAA0BP,EAAwBP,CAAa,EAE5G,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,UAAW,MAAOQ,EAA+Bb,EAAiC,CAAC,IAA4B,CAC3G,IAAMC,EAAe,iBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBG,EAAeR,EAAwBP,CAAa,EAEjG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,mBAAoB,MAAOS,EAAiDd,EAAiC,CAAC,IAA4B,CACtI,IAAMC,EAAe,yBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBI,EAAwBT,EAAwBP,CAAa,EAE1G,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,YAAa,MAAOU,EAAmCf,EAAiC,CAAC,IAA4B,CACjH,IAAMC,EAAe,kBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBK,EAAiBV,EAAwBP,CAAa,EAEnG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,WAAY,MAAOW,EAAiChB,EAAiC,CAAC,IAA4B,CAC9G,IAAMC,EAAe,oBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBM,EAAgBX,EAAwBP,CAAa,EAElG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,kBAAmB,MAAOY,EAA+CjB,EAAiC,CAAC,IAA4B,CACnI,IAAMC,EAAe,yBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBO,EAAuBZ,EAAwBP,CAAa,EAEzG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,cAAe,MAAOa,EAAuClB,EAAiC,CAAC,IAA4B,CACvH,IAAMC,EAAe,oBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBQ,EAAmBb,EAAwBP,CAAa,EAErG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,WAAY,MAAOc,EAAiCnB,EAAiC,CAAC,IAA4B,CAC9G,IAAMC,EAAe,iBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBS,EAAgBd,EAAwBP,CAAa,EAElG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,sBAAuB,MAAOe,EAAuDpB,EAAiC,CAAC,IAA4B,CAC/I,IAAMC,EAAe,8BAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBU,EAA2Bf,EAAwBP,CAAa,EAE7G,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,UAAW,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAExFsB,EAAkB,YAAa,KAAMD,CAAE,EACvC,IAAMpB,EAAe,sBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGJ,CAAO,EACvEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,mBAAoB,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEjGsB,EAAkB,qBAAsB,KAAMD,CAAE,EAChD,IAAMpB,EAAe,8BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGJ,CAAO,EACvEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,WAAY,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEzFsB,EAAkB,aAAc,KAAMD,CAAE,EACxC,IAAMpB,EAAe,yBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGJ,CAAO,EACvEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,kBAAmB,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEhGsB,EAAkB,oBAAqB,KAAMD,CAAE,EAC/C,IAAMpB,EAAe,8BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGJ,CAAO,EACvEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,cAAe,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAE5FsB,EAAkB,gBAAiB,KAAMD,CAAE,EAC3C,IAAMpB,EAAe,yBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGJ,CAAO,EACvEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,WAAY,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEzFsB,EAAkB,aAAc,KAAMD,CAAE,EACxC,IAAMpB,EAAe,sBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGJ,CAAO,EACvEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,sBAAuB,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEpGsB,EAAkB,wBAAyB,KAAMD,CAAE,EACnD,IAAMpB,EAAe,mCAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGJ,CAAO,EACvEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,aAAc,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAE3FsB,EAAkB,eAAgB,KAAMD,CAAE,EAC1C,IAAMpB,EAAe,kCAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,OAAQ,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAErFsB,EAAkB,SAAU,KAAMD,CAAE,EACpC,IAAMpB,EAAe,sBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EASA,gBAAiB,MAAOgB,EAAYE,EAAmBC,EAAiBxB,EAAiC,CAAC,IAA4B,CAElIsB,EAAkB,kBAAmB,KAAMD,CAAE,EAE7CC,EAAkB,kBAAmB,YAAaC,CAAS,EAE3DD,EAAkB,kBAAmB,UAAWE,CAAO,EACvD,IAAMvB,EAAe,gCAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAE5BgB,IAAc,SACdhB,EAAuB,UAAegB,GAGtCC,IAAY,SACZjB,EAAuB,QAAaiB,GAKxChB,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,WAAY,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEzFsB,EAAkB,aAAc,KAAMD,CAAE,EACxC,IAAMpB,EAAe,2BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,cAAe,MAAOgB,EAAYI,EAA6BzB,EAAiC,CAAC,IAA4B,CAEzHsB,EAAkB,gBAAiB,KAAMD,CAAE,EAE3CC,EAAkB,gBAAiB,OAAQG,CAAI,EAC/C,IAAMxB,EAAe,8BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAE5BkB,IAAS,SACTlB,EAAuB,KAAUkB,GAKrCjB,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,gBAAiB,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAE9FsB,EAAkB,kBAAmB,KAAMD,CAAE,EAC7C,IAAMpB,EAAe,8BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,SAAU,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEvFsB,EAAkB,WAAY,KAAMD,CAAE,EACtC,IAAMpB,EAAe,uBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,QAAS,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEtFsB,EAAkB,UAAW,KAAMD,CAAE,EACrC,IAAMpB,EAAe,yBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,eAAgB,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAE7FsB,EAAkB,iBAAkB,KAAMD,CAAE,EAC5C,IAAMpB,EAAe,8BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,qBAAsB,MAAOqB,EAAcC,EAAiB3B,EAAiC,CAAC,IAA4B,CAEtHsB,EAAkB,uBAAwB,OAAQI,CAAI,EAEtDJ,EAAkB,uBAAwB,UAAWK,CAAO,EAC5D,IAAM1B,EAAe,0CAChB,QAAQ,SAAe,mBAAmB,OAAOyB,CAAI,CAAC,CAAC,EACvD,QAAQ,YAAkB,mBAAmB,OAAOC,CAAO,CAAC,CAAC,EAE5DzB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,mBAAoB,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEjGsB,EAAkB,qBAAsB,KAAMD,CAAE,EAChD,IAAMpB,EAAe,mCAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,WAAY,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEzFsB,EAAkB,aAAc,KAAMD,CAAE,EACxC,IAAMpB,EAAe,yBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,wBAAyB,MAAOuB,EAA2D5B,EAAiC,CAAC,IAA4B,CACrJ,IAAMC,EAAe,uCAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBkB,EAA6BvB,EAAwBP,CAAa,EAE/G,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,mBAAoB,MAAOwB,EAAiD7B,EAAiC,CAAC,IAA4B,CACtI,IAAMC,EAAe,kCAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBmB,EAAwBxB,EAAwBP,CAAa,EAE1G,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,gBAAiB,MAAOyB,EAA2C9B,EAAiC,CAAC,IAA4B,CAC7H,IAAMC,EAAe,+BAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBoB,EAAqBzB,EAAwBP,CAAa,EAEvG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,qBAAsB,MAAOqB,EAAcC,EAAiB3B,EAAiC,CAAC,IAA4B,CAEtHsB,EAAkB,uBAAwB,OAAQI,CAAI,EAEtDJ,EAAkB,uBAAwB,UAAWK,CAAO,EAC5D,IAAM1B,EAAe,8CAChB,QAAQ,SAAe,mBAAmB,OAAOyB,CAAI,CAAC,CAAC,EACvD,QAAQ,YAAkB,mBAAmB,OAAOC,CAAO,CAAC,CAAC,EAE5DzB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,yBAA0B,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEvGsB,EAAkB,2BAA4B,KAAMD,CAAE,EACtD,IAAMpB,EAAe,kCAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EASA,SAAU,MAAOoB,EAAwBJ,EAAYK,EAAc1B,EAAiC,CAAC,IAA4B,CAE7HsB,EAAkB,WAAY,OAAQG,CAAI,EAE1CH,EAAkB,WAAY,KAAMD,CAAE,EAEtCC,EAAkB,WAAY,OAAQI,CAAI,EAC1C,IAAMzB,EAAe,qCAChB,QAAQ,SAAe,mBAAmB,OAAOwB,CAAI,CAAC,CAAC,EACvD,QAAQ,OAAa,mBAAmB,OAAOJ,CAAE,CAAC,CAAC,EACnD,QAAQ,SAAe,mBAAmB,OAAOK,CAAI,CAAC,CAAC,EAEtDxB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,QAAS,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAEtFsB,EAAkB,UAAW,KAAMD,CAAE,EACrC,IAAMpB,EAAe,sBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,aAAc,MAAOgB,EAAYrB,EAAiC,CAAC,IAA4B,CAE3FsB,EAAkB,eAAgB,KAAMD,CAAE,EAC1C,IAAMpB,EAAe,4BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAKjCE,EAAgBN,EAJe,CAAC,CAIsB,EACtD,IAAIO,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,WAAY,MAAO0B,EAAiC/B,EAAiC,CAAC,IAA4B,CAC9G,IAAMC,EAAe,uBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBqB,EAAgB1B,EAAwBP,CAAa,EAElG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,SAAU,MAAO2B,EAAoBhC,EAAiC,CAAC,IAA4B,CAC/F,IAAMC,EAAe,iBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAE5ByB,IAAc,SACdzB,EAAuB,UAAeyB,GAK1CxB,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EASA,kBAAmB,MAAO2B,EAAoBC,EAAmCC,EAAgClC,EAAiC,CAAC,IAA4B,CAC3K,IAAMC,EAAe,yBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAMhC,GAJIyB,IAAc,SACdzB,EAAuB,UAAeyB,GAGtCC,IAAS,OACT,OAAW,CAACE,EAAKC,CAAK,IAAK,OAAO,QAAQH,CAAI,EAC1C1B,EAAuB4B,CAAG,EAAIC,EAIlCF,IACA3B,EAAuB,eAAoB2B,GAK/C1B,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,WAAY,MAAO2B,EAAoBP,EAAezB,EAAiC,CAAC,IAA4B,CAChH,IAAMC,EAAe,kBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAE5ByB,IAAc,SACdzB,EAAuB,UAAeyB,GAGtCP,IAAS,SACTlB,EAAuB,KAAUkB,GAKrCjB,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,UAAW,MAAOgC,EAAeL,EAAoBhC,EAAiC,CAAC,IAA4B,CAE/GsB,EAAkB,YAAa,QAASe,CAAK,EAC7C,IAAMpC,EAAe,oBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAE5ByB,IAAc,SACdzB,EAAuB,UAAeyB,GAGtCK,IAAU,SACV9B,EAAuB,MAAW8B,GAKtC7B,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EASA,iBAAkB,MAAO2B,EAAoBN,EAAeC,EAAkB3B,EAAiC,CAAC,IAA4B,CACxI,IAAMC,EAAe,yBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAE5ByB,IAAc,SACdzB,EAAuB,UAAeyB,GAGtCN,IAAS,SACTnB,EAAuB,KAAUmB,GAGjCC,IAAY,SACZpB,EAAuB,QAAaoB,GAKxCnB,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EASA,aAAc,MAAO2B,EAAoBM,EAAyBL,EAAmCjC,EAAiC,CAAC,IAA4B,CAC/J,IAAMC,EAAe,oBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAUhC,GARIyB,IAAc,SACdzB,EAAuB,UAAeyB,GAGtCM,IAAmB,SACnB/B,EAAuB,eAAoB+B,GAG3CL,IAAS,OACT,OAAW,CAACE,EAAKC,CAAK,IAAK,OAAO,QAAQH,CAAI,EAC1C1B,EAAuB4B,CAAG,EAAIC,EAMtC5B,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EASA,uBAAwB,MAAO2B,EAAoBN,EAAeC,EAAkB3B,EAAiC,CAAC,IAA4B,CAC9I,IAAMC,EAAe,6BAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAE5ByB,IAAc,SACdzB,EAAuB,UAAeyB,GAGtCN,IAAS,SACTnB,EAAuB,KAAUmB,GAGjCC,IAAY,SACZpB,EAAuB,QAAaoB,GAKxCnB,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EASA,UAAW,MAAO2B,EAAoBM,EAAyBL,EAAmCjC,EAAiC,CAAC,IAA4B,CAC5J,IAAMC,EAAe,iBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAUhC,GARIyB,IAAc,SACdzB,EAAuB,UAAeyB,GAGtCM,IAAmB,SACnB/B,EAAuB,eAAoB+B,GAG3CL,IAAS,OACT,OAAW,CAACE,EAAKC,CAAK,IAAK,OAAO,QAAQH,CAAI,EAC1C1B,EAAuB4B,CAAG,EAAIC,EAMtC5B,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,qBAAsB,MAAO2B,EAAoBhC,EAAiC,CAAC,IAA4B,CAC3G,IAAMC,EAAe,8BAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAE5ByB,IAAc,SACdzB,EAAuB,UAAeyB,GAK1CxB,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAOA,eAAgB,MAAO2B,EAAoBhC,EAAiC,CAAC,IAA4B,CACrG,IAAMC,EAAe,uBAEfC,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAE5ByB,IAAc,SACdzB,EAAuB,UAAeyB,GAK1CxB,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAEpG,CACH,IAAKW,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAUA,WAAY,MAAOoB,EAA0BJ,EAAYK,EAAca,EAAiCvC,EAAiC,CAAC,IAA4B,CAElKsB,EAAkB,aAAc,OAAQG,CAAI,EAE5CH,EAAkB,aAAc,KAAMD,CAAE,EAExCC,EAAkB,aAAc,OAAQI,CAAI,EAC5C,IAAMzB,EAAe,qCAChB,QAAQ,SAAe,mBAAmB,OAAOwB,CAAI,CAAC,CAAC,EACvD,QAAQ,OAAa,mBAAmB,OAAOJ,CAAE,CAAC,CAAC,EACnD,QAAQ,SAAe,mBAAmB,OAAOK,CAAI,CAAC,CAAC,EAEtDxB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,QAAS,GAAGD,EAAa,GAAGJ,CAAO,EACtEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsB6B,EAAgBlC,EAAwBP,CAAa,EAElG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAUA,SAAU,MAAOoB,EAAwBJ,EAAYK,EAAcc,EAA6BxC,EAAiC,CAAC,IAA4B,CAE1JsB,EAAkB,WAAY,OAAQG,CAAI,EAE1CH,EAAkB,WAAY,KAAMD,CAAE,EAEtCC,EAAkB,WAAY,OAAQI,CAAI,EAC1C,IAAMzB,EAAe,qCAChB,QAAQ,SAAe,mBAAmB,OAAOwB,CAAI,CAAC,CAAC,EACvD,QAAQ,OAAa,mBAAmB,OAAOJ,CAAE,CAAC,CAAC,EACnD,QAAQ,SAAe,mBAAmB,OAAOK,CAAI,CAAC,CAAC,EAEtDxB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsB8B,EAAcnC,EAAwBP,CAAa,EAEhG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,YAAa,MAAOgB,EAAYoB,EAAmCzC,EAAiC,CAAC,IAA4B,CAE7HsB,EAAkB,cAAe,KAAMD,CAAE,EACzC,IAAMpB,EAAe,+BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGJ,CAAO,EACrEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsB+B,EAAiBpC,EAAwBP,CAAa,EAEnG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,UAAW,MAAOgB,EAAYqB,EAA+B1C,EAAiC,CAAC,IAA4B,CAEvHsB,EAAkB,YAAa,KAAMD,CAAE,EACvC,IAAMpB,EAAe,sBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBgC,EAAerC,EAAwBP,CAAa,EAEjG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,mBAAoB,MAAOgB,EAAYsB,EAAiD3C,EAAiC,CAAC,IAA4B,CAElJsB,EAAkB,qBAAsB,KAAMD,CAAE,EAChD,IAAMpB,EAAe,8BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBiC,EAAwBtC,EAAwBP,CAAa,EAE1G,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,kBAAmB,MAAOgB,EAAYuB,EAA+C5C,EAAiC,CAAC,IAA4B,CAE/IsB,EAAkB,oBAAqB,KAAMD,CAAE,EAC/C,IAAMpB,EAAe,8BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBkC,EAAuBvC,EAAwBP,CAAa,EAEzG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,cAAe,MAAOgB,EAAYwB,EAAuC7C,EAAiC,CAAC,IAA4B,CAEnIsB,EAAkB,gBAAiB,KAAMD,CAAE,EAC3C,IAAMpB,EAAe,yBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBmC,EAAmBxC,EAAwBP,CAAa,EAErG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,WAAY,MAAOgB,EAAYyB,EAAiC9C,EAAiC,CAAC,IAA4B,CAE1HsB,EAAkB,aAAc,KAAMD,CAAE,EACxC,IAAMpB,EAAe,sBAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBoC,EAAgBzC,EAAwBP,CAAa,EAElG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,gBAAiB,MAAOgB,EAAY0B,EAA2C/C,EAAiC,CAAC,IAA4B,CAEzIsB,EAAkB,kBAAmB,KAAMD,CAAE,EAC7C,IAAMpB,EAAe,4BAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBqC,EAAqB1C,EAAwBP,CAAa,EAEvG,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,EAQA,sBAAuB,MAAOgB,EAAY2B,EAAuDhD,EAAiC,CAAC,IAA4B,CAE3JsB,EAAkB,wBAAyB,KAAMD,CAAE,EACnD,IAAMpB,EAAe,mCAChB,QAAQ,OAAa,mBAAmB,OAAOoB,CAAE,CAAC,CAAC,EAElDnB,EAAiB,IAAI,IAAID,EAAcE,CAAc,EACvDC,EACAN,IACAM,EAAcN,EAAc,aAGhC,IAAMO,EAAyB,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGJ,CAAO,EACpEM,EAA0B,CAAC,EAC3BC,EAAyB,CAAC,EAIhCD,EAAwB,cAAc,EAAI,mBAE1CE,EAAgBN,EAAgBK,CAAsB,EACtD,IAAIE,EAAyBL,GAAeA,EAAY,QAAUA,EAAY,QAAU,CAAC,EACzF,OAAAC,EAAuB,QAAU,CAAC,GAAGC,EAAyB,GAAGG,EAAwB,GAAGT,EAAQ,OAAO,EAC3GK,EAAuB,KAAOK,EAAsBsC,EAA2B3C,EAAwBP,CAAa,EAE7G,CACH,IAAKa,EAAaT,CAAc,EAChC,QAASG,CACb,CACJ,CACJ,CACJ,EAMa4C,EAAe,SAASnD,EAA+B,CAChE,IAAMoD,EAA4BrD,GAA4BC,CAAa,EAC3E,MAAO,CAOH,MAAM,WAAWC,EAAiCC,EAA0H,CACxK,IAAMmD,EAAoB,MAAMD,EAA0B,WAAWnD,EAAgBC,CAAO,EACtFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,qBAAqB5C,EAAqDZ,EAA8G,CAC1L,IAAMmD,EAAoB,MAAMD,EAA0B,qBAAqBtC,EAA0BZ,CAAO,EAC1GoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,iCAAiC,IAAIF,CAA4B,GAAG,IAC/H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,UAAU3C,EAA+Bb,EAAyH,CACpK,IAAMmD,EAAoB,MAAMD,EAA0B,UAAUrC,EAAeb,CAAO,EACpFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,sBAAsB,IAAIF,CAA4B,GAAG,IACpH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,mBAAmB1C,EAAiDd,EAAkI,CACxM,IAAMmD,EAAoB,MAAMD,EAA0B,mBAAmBpC,EAAwBd,CAAO,EACtGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,+BAA+B,IAAIF,CAA4B,GAAG,IAC7H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,YAAYzC,EAAmCf,EAA2H,CAC5K,IAAMmD,EAAoB,MAAMD,EAA0B,YAAYnC,EAAiBf,CAAO,EACxFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,wBAAwB,IAAIF,CAA4B,GAAG,IACtH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,WAAWxC,EAAiChB,EAA0H,CACxK,IAAMmD,EAAoB,MAAMD,EAA0B,WAAWlC,EAAgBhB,CAAO,EACtFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,kBAAkBvC,EAA+CjB,EAAiI,CACpM,IAAMmD,EAAoB,MAAMD,EAA0B,kBAAkBjC,EAAuBjB,CAAO,EACpGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,8BAA8B,IAAIF,CAA4B,GAAG,IAC5H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,cAActC,EAAuClB,EAA6H,CACpL,IAAMmD,EAAoB,MAAMD,EAA0B,cAAchC,EAAmBlB,CAAO,EAC5FoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,0BAA0B,IAAIF,CAA4B,GAAG,IACxH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,WAAWrC,EAAiCnB,EAA0H,CACxK,IAAMmD,EAAoB,MAAMD,EAA0B,WAAW/B,EAAgBnB,CAAO,EACtFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,sBAAsBpC,EAAuDpB,EAAqI,CACpN,IAAMmD,EAAoB,MAAMD,EAA0B,sBAAsB9B,EAA2BpB,CAAO,EAC5GoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,kCAAkC,IAAIF,CAA4B,GAAG,IAChI,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,UAAUnC,EAAYrB,EAA8G,CACtI,IAAMmD,EAAoB,MAAMD,EAA0B,UAAU7B,EAAIrB,CAAO,EACzEoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,sBAAsB,IAAIF,CAA4B,GAAG,IACpH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,mBAAmBnC,EAAYrB,EAA8G,CAC/I,IAAMmD,EAAoB,MAAMD,EAA0B,mBAAmB7B,EAAIrB,CAAO,EAClFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,+BAA+B,IAAIF,CAA4B,GAAG,IAC7H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,WAAWnC,EAAYrB,EAA8G,CACvI,IAAMmD,EAAoB,MAAMD,EAA0B,WAAW7B,EAAIrB,CAAO,EAC1EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,kBAAkBnC,EAAYrB,EAA8G,CAC9I,IAAMmD,EAAoB,MAAMD,EAA0B,kBAAkB7B,EAAIrB,CAAO,EACjFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,8BAA8B,IAAIF,CAA4B,GAAG,IAC5H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,cAAcnC,EAAYrB,EAA8G,CAC1I,IAAMmD,EAAoB,MAAMD,EAA0B,cAAc7B,EAAIrB,CAAO,EAC7EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,0BAA0B,IAAIF,CAA4B,GAAG,IACxH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,WAAWnC,EAAYrB,EAA8G,CACvI,IAAMmD,EAAoB,MAAMD,EAA0B,WAAW7B,EAAIrB,CAAO,EAC1EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,sBAAsBnC,EAAYrB,EAA8G,CAClJ,IAAMmD,EAAoB,MAAMD,EAA0B,sBAAsB7B,EAAIrB,CAAO,EACrFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,kCAAkC,IAAIF,CAA4B,GAAG,IAChI,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,aAAanC,EAAYrB,EAA2G,CACtI,IAAMmD,EAAoB,MAAMD,EAA0B,aAAa7B,EAAIrB,CAAO,EAC5EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,yBAAyB,IAAIF,CAA4B,GAAG,IACvH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,OAAOnC,EAAYrB,EAAsH,CAC3I,IAAMmD,EAAoB,MAAMD,EAA0B,OAAO7B,EAAIrB,CAAO,EACtEoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,mBAAmB,IAAIF,CAA4B,GAAG,IACjH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EASA,MAAM,gBAAgBnC,EAAYE,EAAmBC,EAAiBxB,EAA+H,CACjM,IAAMmD,EAAoB,MAAMD,EAA0B,gBAAgB7B,EAAIE,EAAWC,EAASxB,CAAO,EACnGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,4BAA4B,IAAIF,CAA4B,GAAG,IAC1H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,WAAWnC,EAAYrB,EAA0H,CACnJ,IAAMmD,EAAoB,MAAMD,EAA0B,WAAW7B,EAAIrB,CAAO,EAC1EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,cAAcnC,EAAYI,EAA6BzB,EAA6H,CACtL,IAAMmD,EAAoB,MAAMD,EAA0B,cAAc7B,EAAII,EAAMzB,CAAO,EACnFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,0BAA0B,IAAIF,CAA4B,GAAG,IACxH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,gBAAgBnC,EAAYrB,EAA+H,CAC7J,IAAMmD,EAAoB,MAAMD,EAA0B,gBAAgB7B,EAAIrB,CAAO,EAC/EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,4BAA4B,IAAIF,CAA4B,GAAG,IAC1H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,SAASnC,EAAYrB,EAAwH,CAC/I,IAAMmD,EAAoB,MAAMD,EAA0B,SAAS7B,EAAIrB,CAAO,EACxEoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,qBAAqB,IAAIF,CAA4B,GAAG,IACnH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,QAAQnC,EAAYrB,EAAuH,CAC7I,IAAMmD,EAAoB,MAAMD,EAA0B,QAAQ7B,EAAIrB,CAAO,EACvEoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,oBAAoB,IAAIF,CAA4B,GAAG,IAClH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,eAAenC,EAAYrB,EAA8H,CAC3J,IAAMmD,EAAoB,MAAMD,EAA0B,eAAe7B,EAAIrB,CAAO,EAC9EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,2BAA2B,IAAIF,CAA4B,GAAG,IACzH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,qBAAqB9B,EAAcC,EAAiB3B,EAAoI,CAC1L,IAAMmD,EAAoB,MAAMD,EAA0B,qBAAqBxB,EAAMC,EAAS3B,CAAO,EAC/FoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,iCAAiC,IAAIF,CAA4B,GAAG,IAC/H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,mBAAmBnC,EAAYrB,EAAkI,CACnK,IAAMmD,EAAoB,MAAMD,EAA0B,mBAAmB7B,EAAIrB,CAAO,EAClFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,+BAA+B,IAAIF,CAA4B,GAAG,IAC7H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,WAAWnC,EAAYrB,EAA0H,CACnJ,IAAMmD,EAAoB,MAAMD,EAA0B,WAAW7B,EAAIrB,CAAO,EAC1EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,wBAAwB5B,EAA2D5B,EAAuI,CAC5N,IAAMmD,EAAoB,MAAMD,EAA0B,wBAAwBtB,EAA6B5B,CAAO,EAChHoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,oCAAoC,IAAIF,CAA4B,GAAG,IAClI,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,mBAAmB3B,EAAiD7B,EAAkI,CACxM,IAAMmD,EAAoB,MAAMD,EAA0B,mBAAmBrB,EAAwB7B,CAAO,EACtGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,+BAA+B,IAAIF,CAA4B,GAAG,IAC7H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,gBAAgB1B,EAA2C9B,EAA+H,CAC5L,IAAMmD,EAAoB,MAAMD,EAA0B,gBAAgBpB,EAAqB9B,CAAO,EAChGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,4BAA4B,IAAIF,CAA4B,GAAG,IAC1H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,qBAAqB9B,EAAcC,EAAiB3B,EAAoI,CAC1L,IAAMmD,EAAoB,MAAMD,EAA0B,qBAAqBxB,EAAMC,EAAS3B,CAAO,EAC/FoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,iCAAiC,IAAIF,CAA4B,GAAG,IAC/H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,yBAAyBnC,EAAYrB,EAAwI,CAC/K,IAAMmD,EAAoB,MAAMD,EAA0B,yBAAyB7B,EAAIrB,CAAO,EACxFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,qCAAqC,IAAIF,CAA4B,GAAG,IACnI,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EASA,MAAM,SAAS/B,EAAwBJ,EAAYK,EAAc1B,EAAwH,CACrL,IAAMmD,EAAoB,MAAMD,EAA0B,SAASzB,EAAMJ,EAAIK,EAAM1B,CAAO,EACpFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,qBAAqB,IAAIF,CAA4B,GAAG,IACnH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,QAAQnC,EAAYrB,EAAuH,CAC7I,IAAMmD,EAAoB,MAAMD,EAA0B,QAAQ7B,EAAIrB,CAAO,EACvEoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,oBAAoB,IAAIF,CAA4B,GAAG,IAClH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,aAAanC,EAAYrB,EAA4H,CACvJ,IAAMmD,EAAoB,MAAMD,EAA0B,aAAa7B,EAAIrB,CAAO,EAC5EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,yBAAyB,IAAIF,CAA4B,GAAG,IACvH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,WAAWzB,EAAiC/B,EAA0H,CACxK,IAAMmD,EAAoB,MAAMD,EAA0B,WAAWnB,EAAgB/B,CAAO,EACtFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,SAASxB,EAAoBhC,EAAwH,CACvJ,IAAMmD,EAAoB,MAAMD,EAA0B,SAASlB,EAAWhC,CAAO,EAC/EoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,qBAAqB,IAAIF,CAA4B,GAAG,IACnH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EASA,MAAM,kBAAkBxB,EAAoBC,EAAmCC,EAAgClC,EAAiI,CAC5O,IAAMmD,EAAoB,MAAMD,EAA0B,kBAAkBlB,EAAWC,EAAMC,EAAgBlC,CAAO,EAC9GoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,8BAA8B,IAAIF,CAA4B,GAAG,IAC5H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,WAAWxB,EAAoBP,EAAezB,EAA0H,CAC1K,IAAMmD,EAAoB,MAAMD,EAA0B,WAAWlB,EAAWP,EAAMzB,CAAO,EACvFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,UAAUnB,EAAeL,EAAoBhC,EAAyH,CACxK,IAAMmD,EAAoB,MAAMD,EAA0B,UAAUb,EAAOL,EAAWhC,CAAO,EACvFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,sBAAsB,IAAIF,CAA4B,GAAG,IACpH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EASA,MAAM,iBAAiBxB,EAAoBN,EAAeC,EAAkB3B,EAAgI,CACxM,IAAMmD,EAAoB,MAAMD,EAA0B,iBAAiBlB,EAAWN,EAAMC,EAAS3B,CAAO,EACtGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,6BAA6B,IAAIF,CAA4B,GAAG,IAC3H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EASA,MAAM,aAAaxB,EAAoBM,EAAyBL,EAAmCjC,EAA4H,CAC3N,IAAMmD,EAAoB,MAAMD,EAA0B,aAAalB,EAAWM,EAAgBL,EAAMjC,CAAO,EACzGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,yBAAyB,IAAIF,CAA4B,GAAG,IACvH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EASA,MAAM,uBAAuBxB,EAAoBN,EAAeC,EAAkB3B,EAAsI,CACpN,IAAMmD,EAAoB,MAAMD,EAA0B,uBAAuBlB,EAAWN,EAAMC,EAAS3B,CAAO,EAC5GoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,mCAAmC,IAAIF,CAA4B,GAAG,IACjI,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EASA,MAAM,UAAUxB,EAAoBM,EAAyBL,EAAmCjC,EAAyH,CACrN,IAAMmD,EAAoB,MAAMD,EAA0B,UAAUlB,EAAWM,EAAgBL,EAAMjC,CAAO,EACtGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,sBAAsB,IAAIF,CAA4B,GAAG,IACpH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,qBAAqBxB,EAAoBhC,EAAoI,CAC/K,IAAMmD,EAAoB,MAAMD,EAA0B,qBAAqBlB,EAAWhC,CAAO,EAC3FoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,iCAAiC,IAAIF,CAA4B,GAAG,IAC/H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAOA,MAAM,eAAexB,EAAoBhC,EAA8H,CACnK,IAAMmD,EAAoB,MAAMD,EAA0B,eAAelB,EAAWhC,CAAO,EACrFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,2BAA2B,IAAIF,CAA4B,GAAG,IACzH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAUA,MAAM,WAAW/B,EAA0BJ,EAAYK,EAAca,EAAiCvC,EAA0H,CAC5N,IAAMmD,EAAoB,MAAMD,EAA0B,WAAWzB,EAAMJ,EAAIK,EAAMa,EAAgBvC,CAAO,EACtGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAUA,MAAM,SAAS/B,EAAwBJ,EAAYK,EAAcc,EAA6BxC,EAAwH,CAClN,IAAMmD,EAAoB,MAAMD,EAA0B,SAASzB,EAAMJ,EAAIK,EAAMc,EAAcxC,CAAO,EAClGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,qBAAqB,IAAIF,CAA4B,GAAG,IACnH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,YAAYnC,EAAYoB,EAAmCzC,EAA8G,CAC3K,IAAMmD,EAAoB,MAAMD,EAA0B,YAAY7B,EAAIoB,EAAiBzC,CAAO,EAC5FoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,wBAAwB,IAAIF,CAA4B,GAAG,IACtH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,UAAUnC,EAAYqB,EAA+B1C,EAAyH,CAChL,IAAMmD,EAAoB,MAAMD,EAA0B,UAAU7B,EAAIqB,EAAe1C,CAAO,EACxFoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,sBAAsB,IAAIF,CAA4B,GAAG,IACpH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,mBAAmBnC,EAAYsB,EAAiD3C,EAAkI,CACpN,IAAMmD,EAAoB,MAAMD,EAA0B,mBAAmB7B,EAAIsB,EAAwB3C,CAAO,EAC1GoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,+BAA+B,IAAIF,CAA4B,GAAG,IAC7H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,kBAAkBnC,EAAYuB,EAA+C5C,EAAiI,CAChN,IAAMmD,EAAoB,MAAMD,EAA0B,kBAAkB7B,EAAIuB,EAAuB5C,CAAO,EACxGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,8BAA8B,IAAIF,CAA4B,GAAG,IAC5H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,cAAcnC,EAAYwB,EAAuC7C,EAA6H,CAChM,IAAMmD,EAAoB,MAAMD,EAA0B,cAAc7B,EAAIwB,EAAmB7C,CAAO,EAChGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,0BAA0B,IAAIF,CAA4B,GAAG,IACxH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,WAAWnC,EAAYyB,EAAiC9C,EAA0H,CACpL,IAAMmD,EAAoB,MAAMD,EAA0B,WAAW7B,EAAIyB,EAAgB9C,CAAO,EAC1FoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,uBAAuB,IAAIF,CAA4B,GAAG,IACrH,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,gBAAgBnC,EAAY0B,EAA2C/C,EAA+H,CACxM,IAAMmD,EAAoB,MAAMD,EAA0B,gBAAgB7B,EAAI0B,EAAqB/C,CAAO,EACpGoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,4BAA4B,IAAIF,CAA4B,GAAG,IAC1H,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,EAQA,MAAM,sBAAsBnC,EAAY2B,EAAuDhD,EAAqI,CAChO,IAAMmD,EAAoB,MAAMD,EAA0B,sBAAsB7B,EAAI2B,EAA2BhD,CAAO,EAChHoD,EAA+BtD,GAAe,aAAe,EAC7DuD,EAAkCC,EAAmB,kCAAkC,IAAIF,CAA4B,GAAG,IAChI,MAAO,CAACG,EAAOC,IAAaC,EAAsBN,EAAmB,EAAAO,QAAaC,EAAW7D,CAAa,EAAEyD,EAAOF,GAAmCG,CAAQ,CAClK,CACJ,CACJ,EA+iDO,IAAMI,EAAN,cAAyBC,CAAQ,CAQ7B,WAAWC,EAAiD,CAAC,EAAGC,EAAiC,CACpG,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,eAAgBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACtJ,CASO,qBAAqBH,EAA2D,CAAC,EAAGC,EAAiC,CACxH,OAAOC,EAAa,KAAK,aAAa,EAAE,qBAAqBF,EAAkB,yBAA0BC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC1K,CASO,UAAUH,EAAgD,CAAC,EAAGC,EAAiC,CAClG,OAAOC,EAAa,KAAK,aAAa,EAAE,UAAUF,EAAkB,cAAeC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACpJ,CASO,mBAAmBH,EAAyD,CAAC,EAAGC,EAAiC,CACpH,OAAOC,EAAa,KAAK,aAAa,EAAE,mBAAmBF,EAAkB,uBAAwBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACtK,CASO,YAAYH,EAAkD,CAAC,EAAGC,EAAiC,CACtG,OAAOC,EAAa,KAAK,aAAa,EAAE,YAAYF,EAAkB,gBAAiBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACxJ,CASO,WAAWH,EAAiD,CAAC,EAAGC,EAAiC,CACpG,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,eAAgBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACtJ,CASO,kBAAkBH,EAAwD,CAAC,EAAGC,EAAiC,CAClH,OAAOC,EAAa,KAAK,aAAa,EAAE,kBAAkBF,EAAkB,sBAAuBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACpK,CASO,cAAcH,EAAoD,CAAC,EAAGC,EAAiC,CAC1G,OAAOC,EAAa,KAAK,aAAa,EAAE,cAAcF,EAAkB,kBAAmBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC5J,CASO,WAAWH,EAAiD,CAAC,EAAGC,EAAiC,CACpG,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,eAAgBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACtJ,CASO,sBAAsBH,EAA4D,CAAC,EAAGC,EAAiC,CAC1H,OAAOC,EAAa,KAAK,aAAa,EAAE,sBAAsBF,EAAkB,0BAA2BC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC5K,CASO,UAAUH,EAA+CC,EAAiC,CAC7F,OAAOC,EAAa,KAAK,aAAa,EAAE,UAAUF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACzI,CASO,mBAAmBH,EAAwDC,EAAiC,CAC/G,OAAOC,EAAa,KAAK,aAAa,EAAE,mBAAmBF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAClJ,CASO,WAAWH,EAAgDC,EAAiC,CAC/F,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC1I,CASO,kBAAkBH,EAAuDC,EAAiC,CAC7G,OAAOC,EAAa,KAAK,aAAa,EAAE,kBAAkBF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACjJ,CASO,cAAcH,EAAmDC,EAAiC,CACrG,OAAOC,EAAa,KAAK,aAAa,EAAE,cAAcF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC7I,CASO,WAAWH,EAAgDC,EAAiC,CAC/F,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC1I,CASO,sBAAsBH,EAA2DC,EAAiC,CACrH,OAAOC,EAAa,KAAK,aAAa,EAAE,sBAAsBF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACrJ,CASO,aAAaH,EAAkDC,EAAiC,CACnG,OAAOC,EAAa,KAAK,aAAa,EAAE,aAAaF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC5I,CASO,OAAOH,EAA4CC,EAAiC,CACvF,OAAOC,EAAa,KAAK,aAAa,EAAE,OAAOF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACtI,CASO,gBAAgBH,EAAqDC,EAAiC,CACzG,OAAOC,EAAa,KAAK,aAAa,EAAE,gBAAgBF,EAAkB,GAAIA,EAAkB,UAAWA,EAAkB,QAASC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACvM,CASO,WAAWH,EAAgDC,EAAiC,CAC/F,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC1I,CASO,cAAcH,EAAmDC,EAAiC,CACrG,OAAOC,EAAa,KAAK,aAAa,EAAE,cAAcF,EAAkB,GAAIA,EAAkB,KAAMC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACrK,CASO,gBAAgBH,EAAqDC,EAAiC,CACzG,OAAOC,EAAa,KAAK,aAAa,EAAE,gBAAgBF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC/I,CASO,SAASH,EAA8CC,EAAiC,CAC3F,OAAOC,EAAa,KAAK,aAAa,EAAE,SAASF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACxI,CASO,QAAQH,EAA6CC,EAAiC,CACzF,OAAOC,EAAa,KAAK,aAAa,EAAE,QAAQF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACvI,CASO,eAAeH,EAAoDC,EAAiC,CACvG,OAAOC,EAAa,KAAK,aAAa,EAAE,eAAeF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC9I,CASO,qBAAqBH,EAA0DC,EAAiC,CACnH,OAAOC,EAAa,KAAK,aAAa,EAAE,qBAAqBF,EAAkB,KAAMA,EAAkB,QAASC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACjL,CASO,mBAAmBH,EAAwDC,EAAiC,CAC/G,OAAOC,EAAa,KAAK,aAAa,EAAE,mBAAmBF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAClJ,CASO,WAAWH,EAAgDC,EAAiC,CAC/F,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC1I,CASO,wBAAwBH,EAA8D,CAAC,EAAGC,EAAiC,CAC9H,OAAOC,EAAa,KAAK,aAAa,EAAE,wBAAwBF,EAAkB,4BAA6BC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAChL,CASO,mBAAmBH,EAAyD,CAAC,EAAGC,EAAiC,CACpH,OAAOC,EAAa,KAAK,aAAa,EAAE,mBAAmBF,EAAkB,uBAAwBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACtK,CASO,gBAAgBH,EAAsD,CAAC,EAAGC,EAAiC,CAC9G,OAAOC,EAAa,KAAK,aAAa,EAAE,gBAAgBF,EAAkB,oBAAqBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAChK,CASO,qBAAqBH,EAA0DC,EAAiC,CACnH,OAAOC,EAAa,KAAK,aAAa,EAAE,qBAAqBF,EAAkB,KAAMA,EAAkB,QAASC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACjL,CASO,yBAAyBH,EAA8DC,EAAiC,CAC3H,OAAOC,EAAa,KAAK,aAAa,EAAE,yBAAyBF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACxJ,CASO,SAASH,EAA8CC,EAAiC,CAC3F,OAAOC,EAAa,KAAK,aAAa,EAAE,SAASF,EAAkB,KAAMA,EAAkB,GAAIA,EAAkB,KAAMC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACxL,CASO,QAAQH,EAA6CC,EAAiC,CACzF,OAAOC,EAAa,KAAK,aAAa,EAAE,QAAQF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACvI,CASO,aAAaH,EAAkDC,EAAiC,CACnG,OAAOC,EAAa,KAAK,aAAa,EAAE,aAAaF,EAAkB,GAAIC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC5I,CASO,WAAWH,EAAiD,CAAC,EAAGC,EAAiC,CACpG,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,eAAgBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACtJ,CASO,SAASH,EAA+C,CAAC,EAAGC,EAAiC,CAChG,OAAOC,EAAa,KAAK,aAAa,EAAE,SAASF,EAAkB,UAAWC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC/I,CASO,kBAAkBH,EAAwD,CAAC,EAAGC,EAAiC,CAClH,OAAOC,EAAa,KAAK,aAAa,EAAE,kBAAkBF,EAAkB,UAAWA,EAAkB,KAAMA,EAAkB,eAAgBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAClN,CASO,WAAWH,EAAiD,CAAC,EAAGC,EAAiC,CACpG,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,UAAWA,EAAkB,KAAMC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACzK,CASO,UAAUH,EAA+CC,EAAiC,CAC7F,OAAOC,EAAa,KAAK,aAAa,EAAE,UAAUF,EAAkB,MAAOA,EAAkB,UAAWC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACzK,CASO,iBAAiBH,EAAuD,CAAC,EAAGC,EAAiC,CAChH,OAAOC,EAAa,KAAK,aAAa,EAAE,iBAAiBF,EAAkB,UAAWA,EAAkB,KAAMA,EAAkB,QAASC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC1M,CASO,aAAaH,EAAmD,CAAC,EAAGC,EAAiC,CACxG,OAAOC,EAAa,KAAK,aAAa,EAAE,aAAaF,EAAkB,UAAWA,EAAkB,eAAgBA,EAAkB,KAAMC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC7M,CASO,uBAAuBH,EAA6D,CAAC,EAAGC,EAAiC,CAC5H,OAAOC,EAAa,KAAK,aAAa,EAAE,uBAAuBF,EAAkB,UAAWA,EAAkB,KAAMA,EAAkB,QAASC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAChN,CASO,UAAUH,EAAgD,CAAC,EAAGC,EAAiC,CAClG,OAAOC,EAAa,KAAK,aAAa,EAAE,UAAUF,EAAkB,UAAWA,EAAkB,eAAgBA,EAAkB,KAAMC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC1M,CASO,qBAAqBH,EAA2D,CAAC,EAAGC,EAAiC,CACxH,OAAOC,EAAa,KAAK,aAAa,EAAE,qBAAqBF,EAAkB,UAAWC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC3J,CASO,eAAeH,EAAqD,CAAC,EAAGC,EAAiC,CAC5G,OAAOC,EAAa,KAAK,aAAa,EAAE,eAAeF,EAAkB,UAAWC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACrJ,CASO,WAAWH,EAAgDC,EAAiC,CAC/F,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,KAAMA,EAAkB,GAAIA,EAAkB,KAAMA,EAAkB,eAAgBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC5N,CASO,SAASH,EAA8CC,EAAiC,CAC3F,OAAOC,EAAa,KAAK,aAAa,EAAE,SAASF,EAAkB,KAAMA,EAAkB,GAAIA,EAAkB,KAAMA,EAAkB,aAAcC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACxN,CASO,YAAYH,EAAiDC,EAAiC,CACjG,OAAOC,EAAa,KAAK,aAAa,EAAE,YAAYF,EAAkB,GAAIA,EAAkB,gBAAiBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC9K,CASO,UAAUH,EAA+CC,EAAiC,CAC7F,OAAOC,EAAa,KAAK,aAAa,EAAE,UAAUF,EAAkB,GAAIA,EAAkB,cAAeC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC1K,CASO,mBAAmBH,EAAwDC,EAAiC,CAC/G,OAAOC,EAAa,KAAK,aAAa,EAAE,mBAAmBF,EAAkB,GAAIA,EAAkB,uBAAwBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC5L,CASO,kBAAkBH,EAAuDC,EAAiC,CAC7G,OAAOC,EAAa,KAAK,aAAa,EAAE,kBAAkBF,EAAkB,GAAIA,EAAkB,sBAAuBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC1L,CASO,cAAcH,EAAmDC,EAAiC,CACrG,OAAOC,EAAa,KAAK,aAAa,EAAE,cAAcF,EAAkB,GAAIA,EAAkB,kBAAmBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAClL,CASO,WAAWH,EAAgDC,EAAiC,CAC/F,OAAOC,EAAa,KAAK,aAAa,EAAE,WAAWF,EAAkB,GAAIA,EAAkB,eAAgBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC5K,CASO,gBAAgBH,EAAqDC,EAAiC,CACzG,OAAOC,EAAa,KAAK,aAAa,EAAE,gBAAgBF,EAAkB,GAAIA,EAAkB,oBAAqBC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACtL,CASO,sBAAsBH,EAA2DC,EAAiC,CACrH,OAAOC,EAAa,KAAK,aAAa,EAAE,sBAAsBF,EAAkB,GAAIA,EAAkB,0BAA2BC,CAAO,EAAE,KAAME,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAClM,CACJ,EDhrQO,IAAMC,EAAN,KAAgB,CACb,aACD,YAAYC,EAA+BC,EAAmBC,EAA+B,CAClG,KAAK,aAAe,IAAIC,EAAWH,EAAeC,EAAUC,CAAa,CAC3E,CACM,mBAAsBE,GAAoD,KAAK,aAAa,mBAAmB,CAAE,uBAAAA,CAAuB,CAAC,EAAE,KAAMC,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACrM,gBAAmBC,GAAgC,KAAK,aAAa,gBAAgBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACtJ,kBAAqBC,GAAkC,KAAK,aAAa,kBAAkBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC5J,wBAA2BE,GAA8D,KAAK,aAAa,wBAAwB,CAAE,4BAAAA,CAA4B,CAAC,EAAE,KAAMH,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC9N,mBAAqB,CAAC,CAAE,GAAAG,EAAI,GAAGC,CAAuB,IAA+B,KAAK,aAAa,mBAAmB,CAAE,GAAAD,EAAI,uBAAAC,CAAuB,CAAC,EAAE,KAAML,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EACpN,mBAAsBJ,GAAmC,KAAK,aAAa,mBAAmBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC/J,YAAeM,GAAsC,KAAK,aAAa,YAAY,CAAE,gBAAAA,CAAgB,CAAC,EAAE,KAAMP,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAClK,SAAYC,GAAyB,KAAK,aAAa,SAASA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACjI,WAAcC,GAA2B,KAAK,aAAa,WAAWA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACvI,cAAiBO,GAA0C,KAAK,aAAa,cAAc,CAAE,kBAAAA,CAAkB,CAAC,EAAE,KAAMR,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC5K,mBAAsBQ,GAAoD,KAAK,aAAa,mBAAmB,CAAE,uBAAAA,CAAuB,CAAC,EAAE,KAAMT,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACrM,WAAcC,GAA2B,KAAK,aAAa,WAAWA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACvI,cAAgB,CAAC,CAAE,GAAAG,EAAI,GAAGM,CAAkB,IAA0B,KAAK,aAAa,cAAc,CAAE,GAAAN,EAAI,kBAAAM,CAAkB,CAAC,EAAE,KAAMV,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EAC3L,aAAgBJ,GAA6B,KAAK,aAAa,aAAaA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC7I,cAAiBC,GAA8B,KAAK,aAAa,cAAcA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAChJ,WAAcU,GAAoC,KAAK,aAAa,WAAW,CAAE,eAAAA,CAAe,CAAC,EAAE,KAAMX,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC7J,QAAWC,GAAwB,KAAK,aAAa,QAAQA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC9H,UAAaC,GAA0B,KAAK,aAAa,UAAUA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACpI,gBAAmBW,GAA8C,KAAK,aAAa,gBAAgB,CAAE,oBAAAA,CAAoB,CAAC,EAAE,KAAMZ,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACtL,WAAa,CAAC,CAAE,GAAAG,EAAI,GAAGS,CAAe,IAAuB,KAAK,aAAa,WAAW,CAAE,GAAAT,EAAI,eAAAS,CAAe,CAAC,EAAE,KAAMb,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EAC5K,WAAcJ,GAA2B,KAAK,aAAa,WAAWA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACvI,SAAYC,GAAyB,KAAK,aAAa,SAASA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACjI,SAAW,CAAC,CAAE,KAAAa,EAAM,GAAAV,EAAI,KAAAW,EAAM,GAAGC,CAAa,IAAqB,KAAK,aAAa,SAAS,CAAE,KAAAF,EAAM,GAAAV,EAAI,KAAAW,EAAM,aAAAC,CAAa,CAAC,EAAE,KAAMhB,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EAC1L,WAAa,CAAC,CAAE,KAAAQ,EAAM,GAAAV,EAAI,KAAAW,EAAM,GAAGE,CAAe,IAAuB,KAAK,aAAa,WAAW,CAAE,KAAAH,EAAM,GAAAV,EAAI,KAAAW,EAAM,eAAAE,CAAe,CAAC,EAAE,KAAMjB,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EACpM,WAAcY,GAAoC,KAAK,aAAa,WAAW,CAAE,eAAAA,CAAe,CAAC,EAAE,KAAMlB,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC7J,qBAAwBkB,GAAwD,KAAK,aAAa,qBAAqB,CAAE,yBAAAA,CAAyB,CAAC,EAAE,KAAMnB,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC/M,uBAA0BC,GAAuC,KAAK,aAAa,uBAAuBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC3K,yBAA4BC,GAAyC,KAAK,aAAa,yBAAyBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACjL,qBAAwBC,GAAqC,KAAK,aAAa,qBAAqBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACrK,UAAamB,GAAkC,KAAK,aAAa,UAAU,CAAE,cAAAA,CAAc,CAAC,EAAE,KAAMpB,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACxJ,UAAY,CAAC,CAAE,GAAAG,EAAI,GAAGiB,CAAc,IAAsB,KAAK,aAAa,UAAU,CAAE,GAAAjB,EAAI,cAAAiB,CAAc,CAAC,EAAE,KAAMrB,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EACvK,YAAc,CAAC,CAAE,GAAAF,EAAI,GAAGkB,CAAgB,IAAwB,KAAK,aAAa,YAAY,CAAE,GAAAlB,EAAI,gBAAAkB,CAAgB,CAAC,EAAE,KAAMtB,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EACjL,SAAYJ,GAAyB,KAAK,aAAa,SAASA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACjI,OAAUC,GAAuB,KAAK,aAAa,OAAOA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC3H,UAAaC,GAA0B,KAAK,aAAa,UAAUA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACpI,WAAcC,GAA2B,KAAK,aAAa,WAAWA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACvI,cAAiBC,GAA8B,KAAK,aAAa,cAAcA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAChJ,gBAAmBC,GAAgC,KAAK,aAAa,gBAAgBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACtJ,aAAgBC,GAA6B,KAAK,aAAa,aAAaA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC7I,gBAAkB,CAAC,CAAE,GAAAG,EAAI,GAAGmB,CAAoB,IAA4B,KAAK,aAAa,gBAAgB,CAAE,GAAAnB,EAAI,oBAAAmB,CAAoB,CAAC,EAAE,KAAMvB,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EACrM,eAAkBJ,GAA+B,KAAK,aAAa,eAAeA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACnJ,kBAAqBuB,GAAkD,KAAK,aAAa,kBAAkB,CAAE,sBAAAA,CAAsB,CAAC,EAAE,KAAMxB,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAChM,kBAAoB,CAAC,CAAE,GAAAG,EAAI,GAAGqB,CAAsB,IAA8B,KAAK,aAAa,kBAAkB,CAAE,GAAArB,EAAI,sBAAAqB,CAAsB,CAAC,EAAE,KAAMzB,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EAC/M,iBAAoBJ,GAAiC,KAAK,aAAa,iBAAiBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACzJ,eAAkBC,GAA+B,KAAK,aAAa,eAAeA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACnJ,mBAAsBC,GAAmC,KAAK,aAAa,mBAAmBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC/J,qBAAwBC,GAAqC,KAAK,aAAa,qBAAqBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACrK,kBAAqBC,GAAkC,KAAK,aAAa,kBAAkBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC5J,qBAAwBC,GAAqC,KAAK,aAAa,qBAAqBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACrK,sBAAyBC,GAAsC,KAAK,aAAa,sBAAsBA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACxK,sBAAyByB,GAA0D,KAAK,aAAa,sBAAsB,CAAE,0BAAAA,CAA0B,CAAC,EAAE,KAAM1B,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACpN,sBAAwB,CAAC,CAAE,GAAAG,EAAI,GAAGuB,CAA0B,IAAkC,KAAK,aAAa,sBAAsB,CAAE,GAAAvB,EAAI,0BAAAuB,CAA0B,CAAC,EAAE,KAAM3B,GAAQA,EAAI,IAAI,EAAE,MAAOM,GAAM,CAAE,MAAML,EAASK,CAAC,CAAE,CAAC,EACnO,WAAcsB,GAAoC,KAAK,aAAa,WAAW,CAAE,eAAAA,CAAe,CAAC,EAAE,KAAM5B,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC7J,WAAc4B,GAAoC,KAAK,aAAa,WAAW,CAAE,eAAAA,CAAe,CAAC,EAAE,KAAM7B,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC7J,QAAWC,GAAwB,KAAK,aAAa,QAAQA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC9H,aAAgBC,GAA6B,KAAK,aAAa,aAAaA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EAC7I,WAAcC,GAA2B,KAAK,aAAa,WAAWA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,EACvI,UAAaC,GAA0B,KAAK,aAAa,UAAUA,CAAK,EAAE,KAAMF,GAAQA,EAAI,IAAI,EAAE,MAAO,GAAM,CAAE,MAAMC,EAAS,CAAC,CAAE,CAAC,CAC5I,EA+LA,SAASA,EAAS6B,EAAY,CAC5B,OAAI,GAAAC,QAAM,aAAaD,CAAG,EACjBE,EAAUF,EAAI,UAAU,IAAI,EAG9BE,EAAUF,CAAG,CACtB,CHnUO,IAAMG,EAAN,cAAqBC,CAAoB,CAC9B,OAET,YAAYC,EAA2B,CAAC,EAAG,CAChD,IAAMC,EAAeC,GAAgBF,CAAW,EAC1C,CAAE,KAAAG,EAAM,QAAAC,EAAS,gBAAAC,EAAiB,QAAAC,CAAQ,EAAIL,EAE9CM,EAAc,GAAAC,QAAM,OAAO,CAC/B,cAAe,IAAM,KAAO,KAC5B,iBAAkB,KAAO,KAAO,KAChC,QAASF,GAAW,IACpB,gBAAAD,EACA,QAAAD,CACF,CAAC,EAED,MAAM,OAAWD,EAAMI,CAAW,EAElC,KAAK,OAASN,CAChB,CACF",
  "names": ["src_exports", "__export", "Client", "ForbiddenError", "InternalError", "InvalidDataFormatError", "InvalidIdentifierError", "InvalidJsonSchemaError", "InvalidPayloadError", "InvalidQueryError", "MethodNotFoundError", "PayloadTooLargeError", "ReferenceNotFoundError", "RelationConflictError", "ResourceNotFoundError", "RuntimeError", "UnauthorizedError", "UnknownError", "UnsupportedMediaTypeError", "axios", "errorFrom", "isApiError", "__toCommonJS", "import_axios", "import_browser_or_node", "defaultApiUrl", "apiUrlEnvName", "botIdEnvName", "integrationIdEnvName", "workspaceIdEnvName", "tokenEnvName", "getClientConfig", "clientProps", "props", "getProps", "headers", "getNodeConfig", "config", "token", "BaseApiError", "code", "description", "type", "message", "error", "isObject", "obj", "isApiError", "thrown", "UnknownError", "InternalError", "UnauthorizedError", "ForbiddenError", "PayloadTooLargeError", "InvalidPayloadError", "UnsupportedMediaTypeError", "MethodNotFoundError", "ResourceNotFoundError", "InvalidJsonSchemaError", "InvalidDataFormatError", "InvalidIdentifierError", "RelationConflictError", "ReferenceNotFoundError", "InvalidQueryError", "RuntimeError", "errorTypes", "errorFrom", "err", "getErrorFromObject", "ErrorClass", "import_axios", "import_axios", "import_axios", "BASE_PATH", "BaseAPI", "configuration", "basePath", "BASE_PATH", "axios", "globalAxios", "RequiredError", "field", "msg", "operationServerMap", "DUMMY_BASE_URL", "assertParamExists", "functionName", "paramName", "paramValue", "RequiredError", "setFlattenedQueryParams", "urlSearchParams", "parameter", "key", "item", "currentKey", "setSearchParams", "url", "objects", "searchParams", "serializeDataIfNeeded", "value", "requestOptions", "configuration", "nonString", "toPathString", "createRequestFunction", "axiosArgs", "globalAxios", "BASE_PATH", "axios", "basePath", "axiosRequestArgs", "DefaultApiAxiosParamCreator", "configuration", "callActionBody", "options", "localVarPath", "localVarUrlObj", "DUMMY_BASE_URL", "baseOptions", "localVarRequestOptions", "localVarHeaderParameter", "localVarQueryParameter", "setSearchParams", "headersFromBaseOptions", "serializeDataIfNeeded", "toPathString", "configureIntegrationBody", "createBotBody", "createConversationBody", "createEventBody", "createFileBody", "createIntegrationBody", "createMessageBody", "createUserBody", "createWorkspaceMemberBody", "id", "assertParamExists", "startDate", "endDate", "type", "name", "version", "getOrCreateConversationBody", "getOrCreateMessageBody", "getOrCreateUserBody", "introspectBody", "nextToken", "tags", "participantIds", "key", "value", "botId", "conversationId", "patchStateBody", "setStateBody", "transferBotBody", "updateBotBody", "updateConversationBody", "updateIntegrationBody", "updateMessageBody", "updateUserBody", "updateWorkspaceBody", "updateWorkspaceMemberBody", "DefaultApiFp", "localVarAxiosParamCreator", "localVarAxiosArgs", "localVarOperationServerIndex", "localVarOperationServerBasePath", "operationServerMap", "axios", "basePath", "createRequestFunction", "globalAxios", "BASE_PATH", "DefaultApi", "BaseAPI", "requestParameters", "options", "DefaultApiFp", "request", "ApiClient", "configuration", "basePath", "axiosInstance", "DefaultApi", "createConversationBody", "res", "getError", "props", "getOrCreateConversationBody", "id", "updateConversationBody", "e", "createEventBody", "createMessageBody", "getOrCreateMessageBody", "updateMessageBody", "createUserBody", "getOrCreateUserBody", "updateUserBody", "type", "name", "setStateBody", "patchStateBody", "callActionBody", "configureIntegrationBody", "createBotBody", "updateBotBody", "transferBotBody", "updateWorkspaceBody", "createIntegrationBody", "updateIntegrationBody", "createWorkspaceMemberBody", "updateWorkspaceMemberBody", "introspectBody", "createFileBody", "err", "axios", "errorFrom", "Client", "ApiClient", "clientProps", "clientConfig", "getClientConfig", "host", "headers", "withCredentials", "timeout", "axiosClient", "axios"]
}
